#name: Frontend CI/CD Pipeline
#
#on:
#  push:
#    branches: ["main"]
#    tags: ["v*"]
#  workflow_dispatch:
#
#concurrency:
#  group: frontend-deploy
#  cancel-in-progress: true
#
#env:
#  # Docker Hub repo for the frontend image
#  DOCKERHUB_REPO: normat/frontend-self-detailing
#
#jobs:
#  build-and-deploy:
#    runs-on: ubuntu-latest
#
#    steps:
#      # 1) Checkout
#      - name: Checkout code
#        uses: actions/checkout@v3
#
#      # 2) Cache NPM
#      - name: Cache node modules
#        uses: actions/cache@v3
#        with:
#          path: ~/.npm
#          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
#
#      # 3) Setup Node.js
#      - name: Setup Node.js
#        uses: actions/setup-node@v3
#        with:
#          node-version: "20"
#          cache: "npm"
#
#      # 4) Install & Build
#      - name: Install dependencies
#        run: |
#          npm ci
#          npm run build
#
#      - name: Determine version
#        id: set_version
#        run: |
#          if [[ $GITHUB_REF == refs/tags/v* ]]; then
#            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
#          else
#            echo "VERSION=latest" >> $GITHUB_ENV
#          fi
#
#      - name: Create production env file
#        run: |
#          echo "REACT_APP_API_URL=https://backend.self-detailing.duckdns.org/api/v1" > .env.production
#
#      - name: Build production bundle
#        run: CI=false npm run build
#
#
#          # 4.5) Сгенерировать nginx.conf для SPA
#               - name: Create nginx.conf
#               run: |
#                 mkdir -p docker
#                 cat > docker/nginx.conf << 'EOL'
#                 server {
#                     listen 80;
#                     root /usr/share/nginx/html;
#                     index index.html;
#
#                     location / {
#                         try_files $uri $uri/ /index.html;
#                     }
#                 }
#                 EOL
#
#      # 5) Generate Dockerfile
#      - name: Create Dockerfile
#        run: |
#          cat > Dockerfile << 'EOL'
#          FROM nginx:alpine
#          COPY dist/ /usr/share/nginx/html
#          COPY docker/nginx.conf /etc/nginx/conf.d/default.conf
#          EXPOSE 80
#          CMD ["nginx", "-g", "daemon off;"]
#          EOL
#
#      # 6) DockerHub login
#      - name: Login to Docker Hub
#        uses: docker/login-action@v2
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#
#      # 7) Build & Push image
#      - name: Build and Push Docker image
#        uses: docker/build-push-action@v4
#        with:
#          context: .
#          push: true
#          tags: ${{ env.DOCKERHUB_REPO }}:${{ env.VERSION }}
#
#      - name: Upload nginx docker config for frontend
#        uses: appleboy/scp-action@master
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.REMOTE_USER }}
#          key: ${{ secrets.REMOTE_SSH_KEY }}
#          port: 22
#          source: docker/*
#          target: /docker/
#          strip_components: 1
#
#      # 11) Deploy on remote
#      - name: Deploy frontend on remote
#        uses: appleboy/ssh-action@master
#        env:
#          VERSION: ${{ env.VERSION }}
#          DOCKERHUB_REPO: ${{ env.DOCKERHUB_REPO }}
#          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
#          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
#        with:
#          host: ${{ secrets.SERVER_HOST }}
#          username: ${{ secrets.REMOTE_USER }}
#          key: ${{ secrets.REMOTE_SSH_KEY }}
#          port: 22
#          envs: VERSION,DOCKERHUB_REPO,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN
#          script: |
#            set -e
#            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
#            docker pull "${DOCKERHUB_REPO}:${VERSION}"
#            cd /docker
#            docker compose -f docker-compose-frontend.yml up -d --pull always
#            docker image prune -f


name: Frontend CI/CD Pipeline

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  workflow_dispatch:

concurrency:
  group: frontend-deploy
  cancel-in-progress: true

env:
  # Docker Hub repo for the frontend image
  DOCKERHUB_REPO: normat/frontend-self-detailing

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      # 1) Checkout
      - name: Checkout code
        uses: actions/checkout@v3

      # 2) Cache NPM
      - name: Cache node modules
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      # 3) Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"

      # 4) Install & Build
      - name: Install dependencies
        run: |
          npm ci
      - name: Build for production
        run: |
          npm run build

      # 5) Determine version tag
      - name: Determine version
        id: set_version
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          else
            echo "VERSION=latest" >> $GITHUB_ENV
          fi

      # 6) Create dotenv for production
      - name: Create production env file
        run: |
          echo "REACT_APP_API_URL=https://backend.self-detailing.duckdns.org/api/v1" > .env.production

      # 7) (Re)build bundle with .env.production
      - name: Build production bundle
        run: |
          CI=false npm run build

      # 8) Generate nginx.conf for SPA
      - name: Create nginx.conf
        run: |
          mkdir -p docker
          cat > docker/nginx.conf << 'EOL'
          server {
              listen 80;
              root /usr/share/nginx/html;
              index index.html;

              # SPA: отдаём index.html на все несуществующие пути
              location / {
                  try_files $uri $uri/ /index.html;
              }
          }
          EOL

      # 9) Generate Dockerfile
      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOL'
          FROM nginx:alpine
          COPY dist/ /usr/share/nginx/html
          COPY docker/nginx.conf /etc/nginx/conf.d/default.conf
          EXPOSE 80
          CMD ["nginx", "-g", "daemon off;"]
          EOL

      # 10) Login to Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 11) Build & Push Docker image
      - name: Build and Push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKERHUB_REPO }}:${{ env.VERSION }}

      # 12) Upload docker configs to server
      - name: Upload nginx docker config for frontend
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: 22
          source: docker/*
          target: /docker/
          strip_components: 1

      # 13) Deploy on remote
      - name: Deploy frontend on remote
        uses: appleboy/ssh-action@master
        env:
          VERSION: ${{ env.VERSION }}
          DOCKERHUB_REPO: ${{ env.DOCKERHUB_REPO }}
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_SSH_KEY }}
          port: 22
          envs: VERSION,DOCKERHUB_REPO,DOCKERHUB_USERNAME,DOCKERHUB_TOKEN
          script: |
            set -e
            echo "$DOCKERHUB_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker pull "${DOCKERHUB_REPO}:${VERSION}"
            cd /docker
            docker compose -f docker-compose-frontend.yml up -d --pull always
            docker image prune -f
