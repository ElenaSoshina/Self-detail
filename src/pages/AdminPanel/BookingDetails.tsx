import React, { useState, useEffect } from 'react';
import styles from './AdminPanel.module.css';
import api from '../../api/apiService';

interface BookingDetailsProps {
  bookingId: number | string;
  onClose?: () => void;
  onEdit?: (bookingId: number | string) => void;
  onCancel?: (bookingId: number | string) => void;
}

interface CarData {
  brand: string;
  color: string;
  plate: string;
}

interface BookingData {
  bookingId: number;
  telegramUserId?: number;
  telegramUserName?: string;
  clientName: string;
  clientPhone: string;
  clientEmail?: string;
  start: string;
  end: string;
  services: Array<{
    id: number;
    serviceName: string;
    price: number;
  }>;
  car?: CarData;
  notes?: string;
  products?: any[];
  status?: string;
}

const BookingDetails: React.FC<BookingDetailsProps> = ({ bookingId, onClose, onEdit, onCancel }) => {
  const [booking, setBooking] = useState<BookingData | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–∂—Å—É—Ç–æ—á–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const isCrossingDays = (start: string, end: string): boolean => {
    const startDate = new Date(start);
    const endDate = new Date(end);
    return startDate.toDateString() !== endDate.toDateString();
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–∞—Ç
  const formatDateDisplay = (start: string, end: string) => {
    const startDate = new Date(start);
    const endDate = new Date(end);
    
    if (isCrossingDays(start, end)) {
      return `${startDate.toLocaleDateString('ru-RU')} ‚Äî ${endDate.toLocaleDateString('ru-RU')}`;
    } else {
      return startDate.toLocaleDateString('ru-RU');
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞–º–∏
  const formatTimeDisplay = (start: string, end: string) => {
    const startDate = new Date(start);
    const endDate = new Date(end);
    const startTime = startDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    const endTime = endDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
    
    if (isCrossingDays(start, end)) {
      return `${startTime} ‚Äî ${endTime}`;
    } else {
      return `${startTime} ‚Äî ${endTime}`;
    }
  };

  useEffect(() => {
    const fetchBookingDetails = async () => {
      if (!bookingId) {
        setError('ID –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ —É–∫–∞–∑–∞–Ω');
        setLoading(false);
        return;
      }

      try {
        setLoading(true);
        setError(null);
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bookingId –≤ —á–∏—Å–ª–æ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        const bookingIdValue = typeof bookingId === 'string' ? parseInt(bookingId, 10) : bookingId;
        
        const response = await api.get(`/calendar/booking/${bookingIdValue}`);
        
        if (!response.data) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

        const data = response.data;
        
        if (!data.success) {
          throw new Error(data.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        }

        if (!data.data) {
          throw new Error('–î–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        const bookingData = data.data;
        
        setBooking(bookingData);
      } catch (error: any) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        setError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`);
      } finally {
        setLoading(false);
      }
    };

    fetchBookingDetails();
  }, [bookingId]);

  const renderServiceInfo = () => {
    if (!booking) return null;
    
    if (!booking.services || !Array.isArray(booking.services) || booking.services.length === 0) {
      return (
        <div className={styles.detailItem}>
          <span>–£—Å–ª—É–≥–∞:</span>
          <span>–ù–µ —É–∫–∞–∑–∞–Ω–∞</span>
        </div>
      );
    }
    
    if (booking.services.length === 1) {
      return (
        <div className={styles.detailItem}>
          <span>–£—Å–ª—É–≥–∞:</span>
          <span>{booking.services[0].serviceName}</span>
        </div>
      );
    }
    
    return (
      <>
        <div className={styles.detailItem}>
          <span>–£—Å–ª—É–≥–∏:</span>
          <span>{booking.services.length} —É—Å–ª—É–≥</span>
        </div>
        <div className={styles.servicesList}>
          {booking.services.map((service, index) => (
            <div key={index} className={styles.serviceItem}>
              <span>{service.serviceName}</span>
              <span>{service.price} ‚ÇΩ</span>
            </div>
          ))}
        </div>
      </>
    );
  };

  const renderCarInfo = () => {
    if (!booking || !booking.car) return null;
    
    const { brand, color, plate } = booking.car;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
    if (!brand && !color && !plate) return null;
    
    return (
      <div className={styles.carSection}>
        <div className={styles.carSectionTitle}>–ê–≤—Ç–æ–º–æ–±–∏–ª—å</div>
        {brand && (
          <div className={styles.detailItem}>
            <span>–ú–∞—Ä–∫–∞:</span>
            <span>{brand}</span>
          </div>
        )}
        {color && (
          <div className={styles.detailItem}>
            <span>–¶–≤–µ—Ç:</span>
            <span>{color}</span>
          </div>
        )}
        {plate && (
          <div className={styles.detailItem}>
            <span>–ù–æ–º–µ—Ä:</span>
            <span>{plate}</span>
          </div>
        )}
      </div>
    );
  };
  
  const getServicePrice = () => {
    if (!booking) return 0;
    
    if (!booking.services || !Array.isArray(booking.services) || booking.services.length === 0) {
      return 0;
    }
    
    const hourlyPrice = booking.services[0].price || 0;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ —á–∞—Å–∞—Ö
    const startTime = new Date(booking.start);
    const endTime = new Date(booking.end);
    const durationMs = endTime.getTime() - startTime.getTime();
    const durationHours = Math.max(1, Math.round(durationMs / (1000 * 60 * 60)));
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å (—Ü–µ–Ω–∞ –∑–∞ —á–∞—Å * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤)
    return hourlyPrice * durationHours;
  };

  if (loading) {
    return <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...</div>;
  }

  if (error) {
    return (
      <div className={styles.error}>
        <strong>–û—à–∏–±–∫–∞:</strong> {error}
        <div className={styles.errorActions}>
          {onClose && (
            <button className={styles.closeErrorBtn} onClick={onClose}>
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          )}
        </div>
      </div>
    );
  }

  if (!booking) {
    return (
      <div className={styles.error}>
        <strong>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</strong>
        <div className={styles.errorActions}>
          {onClose && (
            <button className={styles.closeErrorBtn} onClick={onClose}>
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          )}
        </div>
      </div>
    );
  }

  return (
    <div className={styles.bookingDetailsContainer}>
      <div className={styles.bookingDetailsHeader}>
        <h3>–î–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{booking.bookingId}</h3>
        {onClose && (
          <button className={styles.closeBtn} onClick={onClose} title="–ó–∞–∫—Ä—ã—Ç—å">√ó</button>
        )}
      </div>
      
      <div className={styles.bookingDetailsContent}>
        <div className={styles.detailItem}>
          <span>–ö–ª–∏–µ–Ω—Ç:</span>
          <span>{booking.clientName}</span>
        </div>
        
        <div className={styles.detailItem}>
          <span>–¢–µ–ª–µ—Ñ–æ–Ω:</span>
          <span>{booking.clientPhone}</span>
        </div>
        
        {booking.clientEmail && (
          <div className={styles.detailItem}>
            <span>Email:</span>
            <span>{booking.clientEmail}</span>
          </div>
        )}
        
        {renderServiceInfo()}
        
        <div className={styles.detailItem}>
          <span>–î–∞—Ç–∞:</span>
          <span>
            {formatDateDisplay(booking.start, booking.end)}
          </span>
        </div>
        
        <div className={styles.detailItem}>
          <span>–í—Ä–µ–º—è:</span>
          <span>
            {formatTimeDisplay(booking.start, booking.end)}
          </span>
        </div>
        
        <div className={styles.detailItem}>
          <span>–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
          <span>{getServicePrice()} ‚ÇΩ</span>
        </div>
        
        {renderCarInfo()}
        
        <div className={styles.actionButtons}>
          <button 
            onClick={() => onEdit ? onEdit(booking.bookingId) : undefined}
            className={styles.editButton}
          >
            –ò–∑–º–µ–Ω–∏—Ç—å
          </button>
          <button 
            onClick={() => {
              console.log('üî¥ BookingDetails - –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–∞—Ç–∞ –¥–ª—è bookingId:', booking.bookingId);
              console.log('üî¥ BookingDetails - onCancel —Ñ—É–Ω–∫—Ü–∏—è:', typeof onCancel);
              if (onCancel) {
                onCancel(booking.bookingId);
              } else {
                console.error('‚ùå BookingDetails - onCancel —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞!');
              }
            }}
            className={styles.cancelButton}
          >
            –û—Ç–º–µ–Ω–∏—Ç—å
          </button>
        </div>
        
        {booking.notes && booking.notes.trim() !== '' && (
          <div className={styles.detailItem}>
            <span>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</span>
            <span>{booking.notes}</span>
          </div>
        )}
        
        {booking.status && (
          <div className={styles.detailItem}>
            <span>–°—Ç–∞—Ç—É—Å:</span>
            <span>{booking.status}</span>
          </div>
        )}
      </div>
      
      {booking.products && booking.products.length > 0 && (
        <div className={styles.productsSection}>
          <h4>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:</h4>
          <div className={styles.productsList}>
            {booking.products.map((product, index) => (
              <div key={index} className={styles.productItem}>
                <span className={styles.productName}>{product.name}</span>
                <span className={styles.productQuantity}>{product.quantity} —à—Ç.</span>
                <span className={styles.productPrice}>{product.price} ‚ÇΩ</span>
              </div>
            ))}
          </div>
          <div className={styles.detailItem}>
            <span>–ò—Ç–æ–≥–æ –∑–∞ —Ç–æ–≤–∞—Ä—ã:</span>
            <span>
              {booking.products.reduce((sum, product) => sum + (product.price * (product.quantity || 1)), 0)} ‚ÇΩ
            </span>
          </div>
        </div>
      )}
      
      {/* <div className={styles.bookingTotalSection}>
        <div className={styles.detailItem}>
          <span><strong>–û–±—â–∞—è —Å—É–º–º–∞:</strong></span>
          <span><strong>{getServicePrice()} ‚ÇΩ</strong></span>
        </div>
      </div> */}
    </div>
  );
};

export default BookingDetails; 