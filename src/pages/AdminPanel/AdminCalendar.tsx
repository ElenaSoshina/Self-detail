import React, { useState, useEffect, useRef } from 'react';
import styles from './AdminCalendar.module.css';
import api from '../../api/apiService';
import TimeSlots from '../CalendarPage/TimeSlots';
import CalendarPage from '../CalendarPage/CalendarPage';
import BookingDetails from './BookingDetails';
import { fetchAvailableTimeSlotsApi, formatTimeSlots } from '../../pages/CalendarPage/calendarApiService';
import { sendTelegramMessage, sendTelegramMessageToAllAdmins } from '../../api/telegram';

const weekDays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];

interface BookingSlot {
  id: string;
  bookingId?: number | string;
  start: string;
  end: string;
  isBooked: boolean;
  bookingDetails?: {
    userId: string;
    userName: string;
    phone: string;
    plan: {
      title: string;
      price: number;
    };
    hours: number;
    car?: {
      brand: string;
      color: string;
      plate: string;
    };
  };
}

interface TimeSlot {
  start: string;
  end: string;
  available: boolean;
}

interface TimeSlotData {
  formattedTime: string;
  originalData: any;
  sortKey: number;
  start: Date;
  end: Date;
  available: boolean;
}

interface BookingDetail {
  id: number;
  start: string;
  end: string;
  serviceName: string;
  clientName: string;
  clientPhone: string;
  telegramUserId?: number;
  products?: any[];
  price: number;
  status?: string;
  comment?: string;
}

const AdminCalendar: React.FC<{ onUserSelect: (userId: string) => void }> = ({ onUserSelect }) => {
  const [slots, setSlots] = useState<BookingSlot[]>([]);
  const [selectedSlot, setSelectedSlot] = useState<BookingSlot | null>(null);
  const [selectedBookingId, setSelectedBookingId] = useState<number | string | null>(null);
  const [showBookingDetails, setShowBookingDetails] = useState(false);
  const [bookingDetail, setBookingDetail] = useState<BookingDetail | null>(null);
  const [loading, setLoading] = useState(true);
  const [loadingBooking, setLoadingBooking] = useState(false);
  const [bookingError, setBookingError] = useState<string | null>(null);
  const [deleteSuccess, setDeleteSuccess] = useState<boolean>(false);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [calendarDate, setCalendarDate] = useState(new Date());
  const [showAvailableSlots, setShowAvailableSlots] = useState(false);
  const [availableTimeSlots, setAvailableTimeSlots] = useState<string[]>([]);
  const [timeSlotData, setTimeSlotData] = useState<TimeSlotData[]>([]);
  const [startTime, setStartTime] = useState<string | null>(null);
  const [endTime, setEndTime] = useState<string | null>(null);
  const [loadingSlots, setLoadingSlots] = useState(false);
  const [slotsError, setSlotsError] = useState<string | null>(null);
  const popoverRef = useRef<HTMLDivElement>(null);
  const [showCalendarPage, setShowCalendarPage] = useState(false);

  const fetchAvailableSlots = async () => {
    setLoadingSlots(true);
    setSlotsError(null);
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
      const apiData = await fetchAvailableTimeSlotsApi(currentDate);
      
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
      const { formattedTimeSlots, timeSlotsWithData } = formatTimeSlots(apiData);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      setAvailableTimeSlots(formattedTimeSlots);
      setTimeSlotData(timeSlotsWithData);
    } catch (error) {
      console.error('Error fetching available slots:', error);
      setSlotsError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤.');
      setAvailableTimeSlots([]);
      setTimeSlotData([]);
    } finally {
      setLoadingSlots(false);
    }
  };

  useEffect(() => {
    const fetchSlots = async () => {
      setLoading(true);
      try {
        // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
        const year = currentDate.getFullYear();
        const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
        const day = currentDate.getDate().toString().padStart(2, '0');
        
        // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –º–µ–∂—Å—É—Ç–æ—á–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const prevDay = new Date(currentDate);
        prevDay.setDate(prevDay.getDate() - 1);
        const prevYear = prevDay.getFullYear();
        const prevMonth = (prevDay.getMonth() + 1).toString().padStart(2, '0');
        const prevDayNum = prevDay.getDate().toString().padStart(2, '0');
        const startDate = `${prevYear}-${prevMonth}-${prevDayNum}T00:00:00`;
        
        // –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–¥–æ –∫–æ–Ω—Ü–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
        const nextDay = new Date(currentDate);
        nextDay.setDate(nextDay.getDate() + 2);
        const nextYear = nextDay.getFullYear();
        const nextMonth = (nextDay.getMonth() + 1).toString().padStart(2, '0');
        const nextDayNum = nextDay.getDate().toString().padStart(2, '0');
        const endDate = `${nextYear}-${nextMonth}-${nextDayNum}T00:00:00`;
        
        console.log('üìÖ AdminCalendar - –ó–∞–ø—Ä–æ—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', {
          currentDate: currentDate.toISOString(),
          startDate: startDate,
          endDate: endDate
        });
        
        // –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        const response = await api.get('/calendar/booking', {
          params: { start: startDate, end: endDate }
        });
        
        const data = response.data;
        
        if (!data || !data.data) {
          throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
        }
        
        console.log('üìä AdminCalendar - –ü–æ–ª—É—á–µ–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', data.data.length);
        
        // –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        const currentDayStart = new Date(currentDate);
        currentDayStart.setHours(0, 0, 0, 0);
        const currentDayEnd = new Date(currentDate);
        currentDayEnd.setHours(23, 59, 59, 999);
        
        // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –º–∞–ø–ø–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        const relevantBookings = data.data.filter((booking: any) => {
          const bookingStart = new Date(booking.start);
          const bookingEnd = new Date(booking.end);
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –¥–Ω–µ–º
          const intersects = bookingStart <= currentDayEnd && bookingEnd >= currentDayStart;
          
          if (intersects) {
            console.log('‚úÖ AdminCalendar - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Å–µ–∫–∞–µ—Ç—Å—è —Å —Ç–µ–∫—É—â–∏–º –¥–Ω–µ–º:', {
              bookingId: booking.bookingId,
              start: booking.start,
              end: booking.end,
              currentDay: currentDate.toDateString()
            });
          }
          
          return intersects;
        });
        
        console.log('üéØ AdminCalendar - –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è:', relevantBookings.length);
        
        // –ú–∞–ø–ø–∏–Ω–≥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        const bookedSlots = relevantBookings.map((booking: any) => {
          // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
          const serviceName = booking.services && booking.services.length > 0 
            ? booking.services[0].serviceName 
            : '–£—Å–ª—É–≥–∞';
          
          const servicePrice = booking.services && booking.services.length > 0 
            ? booking.services[0].price 
            : 0;
            
          // –û—á–µ–Ω—å –≤–∞–∂–Ω–æ: bookingId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –¥–ª—è API
          const numericBookingId = Number(booking.bookingId);
          
          // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å–æ–≤
          const calcHours = (start: string, end: string) => {
            const startDate = new Date(start);
            const endDate = new Date(end);
            const diffMs = endDate.getTime() - startDate.getTime();
            const diffHours = diffMs / (1000 * 60 * 60);
            return Math.max(1, Math.round(diffHours));
          };
          
          return {
            id: String(booking.bookingId), // id –¥–ª—è React key
            bookingId: numericBookingId, // —á–∏—Å–ª–æ–≤–æ–π bookingId –¥–ª—è API
            start: booking.start,
            end: booking.end,
            isBooked: true,
            bookingDetails: {
              userId: String(booking.telegramUserId || ''),
              userName: booking.clientName || '–ö–ª–∏–µ–Ω—Ç',
              phone: booking.clientPhone || '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω',
              plan: { 
                title: serviceName,
                price: servicePrice
              },
              hours: calcHours(booking.start, booking.end),
              car: booking.car ? {
                brand: booking.car.brand || '',
                color: booking.car.color || '',
                plate: booking.car.plate || ''
              } : undefined
            }
          };
        });
        
        setSlots(bookedSlots);
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
        setSlots([]);
      } finally {
        setLoading(false);
      }
    };
    
    fetchSlots();
  }, [currentDate]);

  useEffect(() => {
    function handleClickOutside(event: MouseEvent) {
      if (popoverRef.current && !popoverRef.current.contains(event.target as Node)) {
        setShowDatePicker(false);
      }
    }
    if (showDatePicker) {
      document.addEventListener('mousedown', handleClickOutside);
    } else {
      document.removeEventListener('mousedown', handleClickOutside);
    }
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, [showDatePicker]);

  const handleSlotClick = (slot: BookingSlot) => {
    setSelectedSlot(slot);
    
    // –ï—Å–ª–∏ —Å–ª–æ—Ç –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (slot.isBooked) {
      // –¢—É—Ç –≤–∞–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞–ª–∏—á–∏–µ bookingId –∏ –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
      if (slot.bookingId !== undefined) {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º bookingId –≤ —á–∏—Å–ª–æ –¥–ª—è API
        const numericBookingId = typeof slot.bookingId === 'string' ? 
          parseInt(slot.bookingId, 10) : 
          slot.bookingId;
        
        setSelectedBookingId(numericBookingId);
        setShowBookingDetails(true);
        
        // –í–ê–ñ–ù–û: –ù–µ –≤—ã–∑—ã–≤–∞–µ–º onUserSelect, –∏–Ω–∞—á–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        // –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        /*
        if (slot.bookingDetails?.userId) {
          onUserSelect(slot.bookingDetails.userId);
        }
        */
      } else {
        console.error('bookingId –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞:', slot);
      }
    } else {
      // –ï—Å–ª–∏ —Å–ª–æ—Ç –Ω–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
      setSelectedBookingId(null);
      setShowBookingDetails(false);
    }
  };

  const handlePrevDay = () => {
    setCurrentDate(prev => {
      const d = new Date(prev);
      d.setDate(d.getDate() - 1);
      return d;
    });
    setSelectedSlot(null);
  };

  const handleNextDay = () => {
    setCurrentDate(prev => {
      const d = new Date(prev);
      d.setDate(d.getDate() + 1);
      return d;
    });
    setSelectedSlot(null);
  };

  const formatDate = (date: Date) => {
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric',
      weekday: 'short'
    });
  };

  const generateDaysForMonth = (year: number, month: number) => {
    const days: { date: Date; isCurrentMonth: boolean; isToday: boolean }[] = [];
    const firstDayOfMonth = new Date(year, month, 1);
    const lastDayOfMonth = new Date(year, month + 1, 0);
    const firstDayWeekday = firstDayOfMonth.getDay() || 7;
    const daysFromPrevMonth = firstDayWeekday - 1;

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const prevMonth = new Date(year, month, 0);
    for (let i = prevMonth.getDate() - daysFromPrevMonth + 1; i <= prevMonth.getDate(); i++) {
      const date = new Date(year, month - 1, i);
      days.push({
        date,
        isCurrentMonth: false,
        isToday: isSameDay(date, new Date())
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const today = new Date();
    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {
      const date = new Date(year, month, i);
      days.push({
        date,
        isCurrentMonth: true,
        isToday: isSameDay(date, today)
      });
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const remainingDays = 42 - days.length;
    for (let i = 1; i <= remainingDays; i++) {
      const date = new Date(year, month + 1, i);
      days.push({
        date,
        isCurrentMonth: false,
        isToday: isSameDay(date, new Date())
      });
    }

    return days;
  };

  const isSameDay = (date1: Date, date2: Date) => {
    return date1.getDate() === date2.getDate() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getFullYear() === date2.getFullYear();
  };

  const handlePrevMonth = () => {
    setCalendarDate(prev => {
      const d = new Date(prev);
      d.setMonth(d.getMonth() - 1);
      return d;
    });
  };

  const handleNextMonth = () => {
    setCalendarDate(prev => {
      const d = new Date(prev);
      d.setMonth(d.getMonth() + 1);
      return d;
    });
  };

  const handleDayClick = (date: Date) => {
    setCurrentDate(date);
    setShowDatePicker(false);
    setSelectedSlot(null);
  };

  const handleAdminBooking = () => {
    setShowCalendarPage(true);
  };

  const handleTimeSlotClick = (time: string) => {
    const slot = timeSlotData.find(s => s.formattedTime === time);
    if (!slot || !slot.available) return;

    if (!startTime || (startTime && endTime)) {
      setStartTime(time);
      setEndTime(null);
    } else if (startTime && !endTime) {
      if (time === startTime) {
        setStartTime(null);
        setEndTime(null);
      } else {
        setEndTime(time);
      }
    }
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Å–µ—Ö —Å–ª–æ—Ç–æ–≤ –∑–∞ —Å—É—Ç–∫–∏ (00:00-01:00 ... 23:00-00:00)
  const allDaySlots = Array.from({ length: 24 }, (_, h) => {
    const start = `${h < 10 ? '0' + h : h}:00`;
    const end = `${(h + 1) < 10 ? '0' + (h + 1) : (h + 1 === 24 ? '00' : h + 1)}:00`;
    return { formattedTime: start, start, end };
  });

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–Ω—è—Ç –ª–∏ —Å–ª–æ—Ç
  const isSlotBooked = (slotTime: string) => {
    return slots.some(slot => {
      const date = new Date(slot.start);
      const hours = date.getHours();
      const minutes = date.getMinutes();
      const formatted = `${hours < 10 ? '0' + hours : hours}:${minutes === 0 ? '00' : minutes < 10 ? '0' + minutes : minutes}`;
      return formatted === slotTime;
    });
  };

  const days = generateDaysForMonth(calendarDate.getFullYear(), calendarDate.getMonth());

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
  const fetchBookingDetail = async (bookingId: number | string) => {
    setLoadingBooking(true);
    setBookingError(null);
    
    try {
      const response = await api.get(`/calendar/booking/${bookingId}`);
      
      if (!response.data) {
        throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
      }
      
      const bookingData = response.data.data;
      setBookingDetail(bookingData);
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      setBookingError(`–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: ${error.message}`);
      setBookingDetail(null);
    } finally {
      setLoadingBooking(false);
    }
  };

  const handleCloseBookingDetails = () => {
    setShowBookingDetails(false);
    setSelectedBookingId(null);
  };

  const handleModalOverlayClick = (e: React.MouseEvent<HTMLDivElement>) => {
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –≤–Ω–µ—à–Ω—é—é –æ–±–ª–∞—Å—Ç—å
    if (e.target === e.currentTarget) {
      handleCloseBookingDetails();
    }
  };

  // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
  useEffect(() => {
    // –≠—Ñ—Ñ–µ–∫—Ç –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏–π
  }, [showBookingDetails, selectedBookingId]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const deleteBooking = async (bookingId: number | string) => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      let bookingData = null;
      try {
        const bookingResponse = await api.get(`/calendar/booking/${bookingId}`);
        if (bookingResponse.data && bookingResponse.data.success && bookingResponse.data.data) {
          bookingData = bookingResponse.data.data;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      }

      // –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const userId = 'admin'; // –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä admin
      await api.delete(`/calendar/booking/${bookingId}`, {
        params: {
          user: userId,
          reason: '—É–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
        }
      });
      setDeleteSuccess(true);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã
      if (bookingData) {
        const formatDate = (iso: string) => {
          const date = new Date(iso);
          return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
        };
        
        const formatTime = (iso: string) => {
          const timePart = iso.split('T')[1];
          if (!timePart) return '00:00';
          
          const [hoursMinutes] = timePart.split(':');
          if (!hoursMinutes) return '00:00';
          
          const hours = hoursMinutes.padStart(2, '0');
          const minutes = (timePart.split(':')[1] || '00').padStart(2, '0');
          
          return `${hours}:${minutes}`;
        };

        const startDate = new Date(bookingData.start);
        const endDate = new Date(bookingData.end);
        const isCrossingDays = startDate.toDateString() !== endDate.toDateString();
        
        let dateTimeStr;
        if (isCrossingDays) {
          dateTimeStr = `üìÖ –î–∞—Ç–∞: ${formatDate(bookingData.start)} ‚Äî ${formatDate(bookingData.end)}\nüïí –í—Ä–µ–º—è: ${formatTime(bookingData.start)} ‚Äî ${formatTime(bookingData.end)}`;
        } else {
          dateTimeStr = `üìÖ –î–∞—Ç–∞: ${formatDate(bookingData.start)}\nüïí –í—Ä–µ–º—è: ${formatTime(bookingData.start)} ‚Äî ${formatTime(bookingData.end)}`;
        }

        const serviceName = bookingData.services && bookingData.services.length > 0 
          ? bookingData.services[0].serviceName 
          : '–£—Å–ª—É–≥–∞';

        const servicePrice = bookingData.services && bookingData.services.length > 0 
          ? bookingData.services[0].price 
          : 0;

        // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        const adminMessage = `‚ùå –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n` +
          `üÜî ID: #${bookingData.bookingId}\n` +
          `üë§ –ö–ª–∏–µ–Ω—Ç: ${bookingData.clientName}\n` +
          `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${bookingData.clientPhone}\n` +
          `${dateTimeStr}\n` +
          `üìã –£—Å–ª—É–≥–∞: ${serviceName}\n` +
          `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${servicePrice}‚ÇΩ`;

        // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const userMessage = `‚ùå –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n` +
          `${dateTimeStr}\n` +
          `üìã –£—Å–ª—É–≥–∞: ${serviceName}\n` +
          `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${servicePrice}‚ÇΩ\n\n`

        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
          await sendTelegramMessageToAllAdmins(adminMessage);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å telegramUserId
          if (bookingData.telegramUserId) {
            try {
              await sendTelegramMessage(String(bookingData.telegramUserId), userMessage);
            } catch (userError) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', userError);
            }
          }
        } catch (telegramError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–º–µ–Ω–µ:', telegramError);
        }
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
      setTimeout(() => {
        setDeleteSuccess(false);
        handleCloseBookingDetails();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        const fetchSlots = async () => {
          setLoading(true);
          try {
            // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
            const year = currentDate.getFullYear();
            const month = (currentDate.getMonth() + 1).toString().padStart(2, '0');
            const day = currentDate.getDate().toString().padStart(2, '0');
            
            // –ù–∞—á–∏–Ω–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è —á—Ç–æ–±—ã –∑–∞—Ö–≤–∞—Ç–∏—Ç—å –º–µ–∂—Å—É—Ç–æ—á–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            const prevDay = new Date(currentDate);
            prevDay.setDate(prevDay.getDate() - 1);
            const prevYear = prevDay.getFullYear();
            const prevMonth = (prevDay.getMonth() + 1).toString().padStart(2, '0');
            const prevDayNum = prevDay.getDate().toString().padStart(2, '0');
            const startDate = `${prevYear}-${prevMonth}-${prevDayNum}T00:00:00`;
            
            // –°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–¥–æ –∫–æ–Ω—Ü–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è)
            const nextDay = new Date(currentDate);
            nextDay.setDate(nextDay.getDate() + 2);
            const nextYear = nextDay.getFullYear();
            const nextMonth = (nextDay.getMonth() + 1).toString().padStart(2, '0');
            const nextDayNum = nextDay.getDate().toString().padStart(2, '0');
            const endDate = `${nextYear}-${nextMonth}-${nextDayNum}T00:00:00`;
            
            // –ó–∞–ø—Ä–æ—Å –∫ API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            const response = await api.get('/calendar/booking', {
              params: { start: startDate, end: endDate }
            });
            
            const data = response.data;
            
            if (!data || !data.data) {
              throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö');
            }
            
            // –ù–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            const currentDayStart = new Date(currentDate);
            currentDayStart.setHours(0, 0, 0, 0);
            const currentDayEnd = new Date(currentDate);
            currentDayEnd.setHours(23, 59, 59, 999);
            
            // –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –º–∞–ø–ø–∏–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
            const relevantBookings = data.data.filter((booking: any) => {
              const bookingStart = new Date(booking.start);
              const bookingEnd = new Date(booking.end);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º –¥–Ω–µ–º
              return bookingStart <= currentDayEnd && bookingEnd >= currentDayStart;
            });
            
            // –ú–∞–ø–ø–∏–Ω–≥ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            const bookedSlots = relevantBookings.map((booking: any) => {
              // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
              const serviceName = booking.services && booking.services.length > 0 
                ? booking.services[0].serviceName 
                : '–£—Å–ª—É–≥–∞';
              
              const servicePrice = booking.services && booking.services.length > 0 
                ? booking.services[0].price 
                : 0;
                
              // –û—á–µ–Ω—å –≤–∞–∂–Ω–æ: bookingId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –¥–ª—è API
              const numericBookingId = Number(booking.bookingId);
              
              // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —á–∞—Å–æ–≤
              const calcHours = (start: string, end: string) => {
                const startDate = new Date(start);
                const endDate = new Date(end);
                const diffMs = endDate.getTime() - startDate.getTime();
                const diffHours = diffMs / (1000 * 60 * 60);
                return Math.max(1, Math.round(diffHours));
              };
              
              return {
                id: String(booking.bookingId), // id –¥–ª—è React key
                bookingId: numericBookingId, // —á–∏—Å–ª–æ–≤–æ–π bookingId –¥–ª—è API
                start: booking.start,
                end: booking.end,
                isBooked: true,
                bookingDetails: {
                  userId: String(booking.telegramUserId || ''),
                  userName: booking.clientName || '–ö–ª–∏–µ–Ω—Ç',
                  phone: booking.clientPhone || '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω',
                  plan: { 
                    title: serviceName,
                    price: servicePrice
                  },
                  hours: calcHours(booking.start, booking.end),
                  car: booking.car ? {
                    brand: booking.car.brand || '',
                    color: booking.car.color || '',
                    plate: booking.car.plate || ''
                  } : undefined
                }
              };
            });
            
            setSlots(bookedSlots);
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
            setSlots([]);
          } finally {
            setLoading(false);
          }
        };
        
        fetchSlots();
      }, 2000);
      
      return true;
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      return false;
    }
  };

  return (
    <div className={styles.container}>
      <div className={styles.calendar}>
        <div className={styles.header}>
          <h2>{formatDate(currentDate)}</h2>
          <div className={styles.dateControls}>
            <button className={styles.dateBtn} onClick={handlePrevDay} title="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –¥–µ–Ω—å">‚Üê</button>
            <button className={styles.calendarIconBtn} onClick={() => setShowDatePicker(v => !v)} title="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É">
              <span className={styles.calendarIcon} />
            </button>
            <button className={styles.dateBtn} onClick={handleNextDay} title="–°–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å">‚Üí</button>
          </div>
          {showDatePicker && (
            <div className={styles.datePopover} ref={popoverRef}>
              <div className={styles.calendarHeader}>
                <div className={styles.calendarTitle}>
                  {calendarDate.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}
                </div>
                <div className={styles.calendarNav}>
                  <button className={styles.calendarNavBtn} onClick={handlePrevMonth}>‚Üê</button>
                  <button className={styles.calendarNavBtn} onClick={handleNextMonth}>‚Üí</button>
                </div>
              </div>
              <div className={styles.calendarGrid}>
                {weekDays.map(day => (
                  <div key={day} className={styles.weekday}>{day}</div>
                ))}
                {days.map((day, index) => (
                  <div
                    key={index}
                    className={`${styles.day} ${!day.isCurrentMonth ? styles.otherMonth : ''} ${day.isToday ? styles.today : ''} ${isSameDay(day.date, currentDate) ? styles.selected : ''}`}
                    onClick={() => handleDayClick(day.date)}
                  >
                    {day.date.getDate()}
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>
        <div className={styles.slotsGrid}>
          {loading ? (
            <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>
          ) : slots.length === 0 ? (
            <>
            <div className={styles.loading}>–ù–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å</div>
            <button className={styles.addBookingBtn} onClick={handleAdminBooking}>
                –î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
              </button>
              </>
          ) : (
            <>
              {slots.map((slot) => (
                <div
                  key={slot.id}
                  className={`${styles.slot} ${slot.isBooked ? styles.booked : ''}`}
                  onClick={() => {
                    handleSlotClick(slot);
                  }}
                >
                  <div className={styles.time}>
                    {(() => {
                      const startDate = new Date(slot.start);
                      const endDate = new Date(slot.end);
                      const currentDayStart = new Date(currentDate);
                      currentDayStart.setHours(0, 0, 0, 0);
                      const currentDayEnd = new Date(currentDate);
                      currentDayEnd.setHours(23, 59, 59, 999);
                      
                      const startTime = startDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
                      const endTime = endDate.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
                      
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                      if (startDate < currentDayStart) {
                        const startDateStr = startDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
                        return `‚Ü™Ô∏è ${startDateStr} ${startTime} ‚Äî ${endTime}`;
                      }
                      
                      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
                      if (endDate > currentDayEnd) {
                        const endDateStr = endDate.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
                        return `${startTime} ‚Äî ${endDateStr} ${endTime} ‚Ü©Ô∏è`;
                      }
                      
                      // –û–±—ã—á–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–Ω—è
                      return `${startTime} ‚Äî ${endTime}`;
                    })()}
                  </div>
                  <div className={styles.bookingInfo}>
                    <b>{slot.bookingDetails?.userName}</b><br/>
                    {slot.bookingDetails?.plan.title}
                    <div className={styles.bookingId}>
                      {slot.bookingDetails?.car?.brand ? 
                        `üöó ${slot.bookingDetails.car.brand}` : 
                        `ID: ${slot.bookingId}`
                      }
                    </div>
                  </div>
                </div>
              ))}
              <button className={styles.addBookingBtn} onClick={handleAdminBooking}>
                –î–æ–±–∞–≤–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
              </button>
            </>
          )}
        </div>
        {showAvailableSlots && (
          <div className={styles.timeSlots}>
            {allDaySlots.map(slot => {
              const booked = isSlotBooked(slot.formattedTime);
              return (
                <button
                  key={slot.formattedTime}
                  className={
                    styles.timeSlot +
                    (booked ? ' ' + styles.timeSlotUnavailable : '') +
                    (startTime === slot.formattedTime ? ' ' + styles.selectedTime : '')
                  }
                  onClick={() => !booked && handleTimeSlotClick(slot.formattedTime)}
                  disabled={booked}
                >
                  {slot.formattedTime}
                </button>
              );
            })}
          </div>
        )}
        {showCalendarPage && (
          <div className={styles.calendarModalOverlay}>
            <div className={styles.calendarModalContent}>
              <button className={styles.cancelButton} onClick={() => setShowCalendarPage(false)}>–û—Ç–º–µ–Ω–∏—Ç—å</button>
              <CalendarPage isAdmin={true} selectedDate={currentDate} />
            </div>
          </div>
        )}
      </div>
      
      {/* –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {showBookingDetails && selectedBookingId !== null && (
        <div className={styles.modalOverlay} onClick={handleModalOverlayClick}>
          <div className={styles.modalContent}>
            <BookingDetails 
              bookingId={selectedBookingId} 
              onClose={handleCloseBookingDetails} 
              onEdit={(bookingId) => {
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
              }}
              onCancel={(bookingId) => {
                if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #${bookingId}?`)) {
                  deleteBooking(bookingId);
                }
              }}
            />
          </div>
        </div>
      )}
      
      {deleteSuccess && (
        <div className={styles.successPopup}>
          <div className={styles.successPopupContent}>
            <div className={styles.successIcon}>‚úì</div>
            <p>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default AdminCalendar; 