import React, { useState, useEffect } from 'react';
import styles from './ProfilePage.module.css';
import { useCart } from '../../context/CartContex';
import BookingDetails from '../AdminPanel/BookingDetails';
import { formatDate } from '../../utils/dateUtils';
import api from '../../api/apiService';
import { getTelegramWebApp } from '../../utils/env';
import { sendTelegramMessage, sendTelegramMessageToAllAdmins } from '../../api/telegram';

interface UserInfo {
  username: string;
  firstName: string;
  lastName: string;
  photoUrl: string | null;
  telegramUserId?: number; // –î–æ–±–∞–≤–ª—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
}

interface Booking {
  id: string;
  date: string;
  timeStart: string;
  timeEnd: string;
  service: string;
  cost: number;
  durationHours: number;
}

interface ApiBooking {
  bookingId: number;
  telegramUserId: number;
  telegramUserName: string;
  clientName: string;
  clientPhone: string;
  clientEmail: string;
  start: string;
  end: string;
  services: Array<{
    id: number;
    serviceName: string;
    price: number;
  }>;
  notes: string;
}

interface Purchase {
  id: string;
  name: string;
  price: number;
  date: string;
  imageUrl: string;
  quantity: number;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤
const calculateDiscount = (hours: number): number => {
  if (hours < 10) return 0;
  if (hours < 20) return 10;
  if (hours < 30) return 20;
  if (hours < 40) return 30;
  if (hours < 50) return 40;
  return 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ—Ä–æ–≥–∞ —Å–∫–∏–¥–∫–∏
const calculateNextDiscountThreshold = (hours: number): number => {
  if (hours < 10) return 10;
  if (hours < 20) return 20;
  if (hours < 30) return 30;
  if (hours < 40) return 40;
  if (hours < 50) return 50;
  return 50; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞ —É–∂–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–µ–∂—Å—É—Ç–æ—á–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
const isCrossingDays = (start: string, end: string): boolean => {
  const startDate = new Date(start);
  const endDate = new Date(end);
  return startDate.toDateString() !== endDate.toDateString();
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å —É—á–µ—Ç–æ–º –º–µ–∂—Å—É—Ç–æ—á–Ω–æ—Å—Ç–∏
const formatBookingTimeDisplay = (booking: Booking) => {
  const startDate = new Date(booking.date);
  const endDate = new Date(booking.date);
  
  // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞
  const [startHour, startMinute] = booking.timeStart.split(':').map(Number);
  const [endHour, endMinute] = booking.timeEnd.split(':').map(Number);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è
  startDate.setHours(startHour, startMinute, 0, 0);
  endDate.setHours(endHour, endMinute, 0, 0);
  
  // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞, –∑–Ω–∞—á–∏—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
  if (endDate.getTime() <= startDate.getTime()) {
    endDate.setDate(endDate.getDate() + 1);
  }
  
  const formatDateShort = (date: Date) => {
    return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit' });
  };
  
  const crossing = startDate.toDateString() !== endDate.toDateString();
  
  if (crossing) {
    // –ú–µ–∂—Å—É—Ç–æ—á–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    return {
      dateDisplay: `${formatDateShort(startDate)} ‚Äî ${formatDateShort(endDate)}`,
      timeDisplay: `${booking.timeStart} ‚Äî ${booking.timeEnd}`,
      isCrossing: true
    };
  } else {
    // –û–±—ã—á–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    return {
      dateDisplay: formatDate(booking.date),
      timeDisplay: `${booking.timeStart} ‚Äî ${booking.timeEnd}`,
      isCrossing: false
    };
  }
};

const ProfilePage: React.FC = () => {
  const [userInfo, setUserInfo] = useState<UserInfo | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [bookings, setBookings] = useState<Booking[]>([]);
  const [purchases, setPurchases] = useState<Purchase[]>([]);
  const [showBookings, setShowBookings] = useState(true);
  const [showPurchases, setShowPurchases] = useState(false);
  const [totalHours, setTotalHours] = useState(0);
  const [discount, setDiscount] = useState(0);
  const [nextDiscountThreshold, setNextDiscountThreshold] = useState(0);
  const [addedToCart, setAddedToCart] = useState<Record<string, boolean>>({});
  const [bookingsError, setBookingsError] = useState<string | null>(null);
  const [selectedBookingId, setSelectedBookingId] = useState<string | null>(null);
  const [showBookingDetails, setShowBookingDetails] = useState(false);
  const [deleteSuccess, setDeleteSuccess] = useState(false);
  const { addToCart } = useCart();

  useEffect(() => {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    const fetchUserData = () => {
      try {
        const tg = (window as any).Telegram?.WebApp;
        if (tg?.initDataUnsafe?.user) {
          const { username, first_name, last_name, photo_url, id } = tg.initDataUnsafe.user;
          setUserInfo({
            username: username || first_name?.toLowerCase() || 'user',
            firstName: first_name || '',
            lastName: last_name || '',
            photoUrl: photo_url || null,
            telegramUserId: id, // –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
          });
          
          // –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ telegramUserId, –∑–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
          if (id) {
            fetchUserBookings(id);
          }
        } else {
          // –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
          const testUserId = 522814078; // –¢–µ—Å—Ç–æ–≤—ã–π ID –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
          setUserInfo({
            username: 'test',
            firstName: '–¢–µ—Å—Ç–æ–≤—ã–π',
            lastName: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
            photoUrl: null,
            telegramUserId: testUserId,
          });
          
          // –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          fetchUserBookings(testUserId);
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        setIsLoading(false);
        setBookingsError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
    };

    fetchUserData();
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ API
  const fetchUserBookings = async (telegramUserId: number) => {
    try {
      setIsLoading(true);
      setBookingsError(null);
      
      console.log('üîç ProfilePage - –ó–∞–≥—Ä—É–∂–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è telegramUserId:', telegramUserId);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π API /users
      let phoneNumber: string | null = null;
      
      try {
        console.log('üìû ProfilePage - –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
        
        const userResponse = await api.get('/users');
        
        console.log('üìù ProfilePage - –û—Ç–≤–µ—Ç /users API:', {
          success: userResponse.data?.success,
          usersCount: userResponse.data?.data?.content?.length || 0
        });
        
        if (userResponse.data?.success && userResponse.data?.data?.content) {
          // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramUserId
          const user = userResponse.data.data.content.find((u: any) => u.telegramUserId === telegramUserId);
          
          if (user) {
            phoneNumber = user.clientPhone;
            console.log('‚úÖ ProfilePage - –ù–∞–π–¥–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', {
              clientName: user.clientName,
              clientPhone: user.clientPhone,
              telegramUserId: user.telegramUserId
            });
          } else {
            console.log('‚ùå ProfilePage - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å telegramUserId –Ω–µ –Ω–∞–π–¥–µ–Ω:', telegramUserId);
          }
        }
        
        if (!phoneNumber) {
          throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
        }
        
        console.log('üì± ProfilePage - –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', phoneNumber);
        
        // –¢–µ–ø–µ—Ä—å –ø–æ–ª—É—á–∞–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –Ω–æ–≤—ã–π endpoint
        const response = await api.get(`/calendar/user/${phoneNumber}/bookings`);
        
        console.log('üìù ProfilePage - –û—Ç–≤–µ—Ç API –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', {
          status: response.status,
          data: response.data,
          phoneNumber: phoneNumber
        });
        
        const data = response.data;
        
        if (!data.success || !data.data) {
          console.error('‚ùå ProfilePage - API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É –∏–ª–∏ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ:', data);
          throw new Error(data.errorMessage || '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö');
        }
        
        const bookings = data.data.bookings || data.data; // –ù–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–∞–∑–Ω–∞—è
        
        console.log('‚úÖ ProfilePage - –ü–æ–ª—É—á–µ–Ω—ã –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞:', {
          bookingsCount: bookings?.length || 0,
          bookings: bookings
        });
        
        if (!bookings || bookings.length === 0) {
          console.log('‚ÑπÔ∏è ProfilePage - –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π');
          setBookings([]);
          setTotalHours(0);
          setDiscount(0);
          setNextDiscountThreshold(10);
          return;
        }
        
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        const formattedBookings = bookings.map((booking: any) => {
          // –ü–æ–¥—Å—á–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ —á–∞—Å–∞—Ö
          const startTime = new Date(booking.start);
          const endTime = new Date(booking.end);
          const diffHours = (endTime.getTime() - startTime.getTime()) / (1000 * 60 * 60);
          
          // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM
          const startTimeStr = startTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
          const endTimeStr = endTime.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' });
          
          // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏
          const serviceName = booking.services && booking.services.length > 0 
            ? booking.services[0].serviceName 
            : '–£—Å–ª—É–≥–∞';
            
          const cost = booking.services && booking.services.length > 0 
            ? booking.services[0].price 
            : 0;
            
          return {
            id: String(booking.bookingId),
            date: booking.start,
            timeStart: startTimeStr,
            timeEnd: endTimeStr,
            service: serviceName,
            cost: cost,
            durationHours: Math.round(diffHours * 10) / 10, // –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 1 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
          };
        });
        
        console.log('üéØ ProfilePage - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', formattedBookings);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ –¥–∞—Ç–µ (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ)
        formattedBookings.sort((a: Booking, b: Booking) => new Date(b.date).getTime() - new Date(a.date).getTime());
        
        setBookings(formattedBookings);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –¥–ª—è —Å–∫–∏–¥–∫–∏
        const totalBookingHours = formattedBookings.reduce((sum: number, booking: Booking) => sum + booking.durationHours, 0);
        setTotalHours(totalBookingHours);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–∏–¥–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —á–∞—Å–æ–≤
        const discountPercent = calculateDiscount(totalBookingHours);
        setDiscount(discountPercent);
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ä–æ–≥ —Å–ª–µ–¥—É—é—â–µ–π —Å–∫–∏–¥–∫–∏
        const nextThreshold = calculateNextDiscountThreshold(totalBookingHours);
        setNextDiscountThreshold(nextThreshold);
        
      } catch (phoneError) {
        console.error('‚ùå ProfilePage - –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', phoneError);
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }
      
    } catch (error) {
      console.error('‚ùå ProfilePage - –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:', error);
      setBookingsError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    } finally {
      setIsLoading(false);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—é
  const handleBookingClick = (bookingId: string) => {
    setSelectedBookingId(bookingId);
    setShowBookingDetails(true);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleCloseBookingDetails = () => {
    setShowBookingDetails(false);
    setSelectedBookingId(null);
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const deleteBooking = async (bookingId: number | string) => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      let bookingData = null;
      try {
        const bookingResponse = await api.get(`/calendar/booking/${bookingId}`);
        if (bookingResponse.data && bookingResponse.data.success && bookingResponse.data.data) {
          bookingData = bookingResponse.data.data;
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', error);
      }

      // –£–¥–∞–ª—è–µ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å query –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
      const userId = Number(userInfo?.telegramUserId) || 0;
      
      console.log('üóëÔ∏è ProfilePage - –£–¥–∞–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', {
        bookingId: bookingId,
        userId: userId,
        telegramUserId: userInfo?.telegramUserId,
        username: userInfo?.username,
        reason: 'deletion'
      });
      
      const response = await api.delete(`/calendar/booking/${bookingId}`, {
        params: {
          user: userId,
          reason: 'deletion'
        }
      });

      console.log('‚úÖ ProfilePage - –û—Ç–≤–µ—Ç –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ:', response.data);

      const data = response.data;
      
      if (!data || !data.success) {
        throw new Error(data.errorMessage || '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã
      if (bookingData) {
        const formatDate = (iso: string) => {
          const date = new Date(iso);
          return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
        };
        
        const formatTime = (iso: string) => {
          const timePart = iso.split('T')[1];
          if (!timePart) return '00:00';
          
          const [hoursMinutes] = timePart.split(':');
          if (!hoursMinutes) return '00:00';
          
          const hours = hoursMinutes.padStart(2, '0');
          const minutes = (timePart.split(':')[1] || '00').padStart(2, '0');
          
          return `${hours}:${minutes}`;
        };

        const startDate = new Date(bookingData.start);
        const endDate = new Date(bookingData.end);
        const isCrossingDays = startDate.toDateString() !== endDate.toDateString();
        
        let dateTimeStr;
        if (isCrossingDays) {
          dateTimeStr = `üìÖ –î–∞—Ç–∞: ${formatDate(bookingData.start)} ‚Äî ${formatDate(bookingData.end)}\nüïí –í—Ä–µ–º—è: ${formatTime(bookingData.start)} ‚Äî ${formatTime(bookingData.end)}`;
        } else {
          dateTimeStr = `üìÖ –î–∞—Ç–∞: ${formatDate(bookingData.start)}\nüïí –í—Ä–µ–º—è: ${formatTime(bookingData.start)} ‚Äî ${formatTime(bookingData.end)}`;
        }

        const serviceName = bookingData.services && bookingData.services.length > 0 
          ? bookingData.services[0].serviceName 
          : '–£—Å–ª—É–≥–∞';

        const servicePrice = bookingData.services && bookingData.services.length > 0 
          ? bookingData.services[0].price 
          : 0;

        // –°–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        const adminMessage = `‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\n` +
          `üÜî ID: #${bookingData.bookingId}\n` +
          `üë§ –ö–ª–∏–µ–Ω—Ç: ${bookingData.clientName}\n` +
          `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${bookingData.clientPhone}\n` +
          `${dateTimeStr}\n` +
          `üìã –£—Å–ª—É–≥–∞: ${serviceName}\n` +
          `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${servicePrice}‚ÇΩ`;

        // –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        const userMessage = `‚úÖ –í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–æ\n\n` +
          `${dateTimeStr}\n` +
          `üìã –£—Å–ª—É–≥–∞: ${serviceName}\n` +
          `üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${servicePrice}‚ÇΩ\n\n` +
          `–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.`;

        try {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
          await sendTelegramMessageToAllAdmins(adminMessage);

          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –µ—Å—Ç—å telegramUserId
          if (bookingData.telegramUserId) {
            try {
              await sendTelegramMessage(String(bookingData.telegramUserId), userMessage);
            } catch (userError) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', userError);
            }
          }
        } catch (telegramError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—Ç–º–µ–Ω–µ:', telegramError);
        }
      }
      
      setDeleteSuccess(true);
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      setTimeout(() => {
        setDeleteSuccess(false);
        handleCloseBookingDetails();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (userInfo?.telegramUserId) {
          fetchUserBookings(userInfo.telegramUserId);
        }
      }, 2000);
      
      return true;
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
      return false;
    }
  };

  if (isLoading) {
    return (
      <div className={styles.loadingContainer}>
        <div className={styles.spinner}></div>
      </div>
    );
  }

  return (
    <div className={styles.profileContainer}>
      <div className={styles.profileHeader}>
        <div className={styles.userInfo}>
          {userInfo?.photoUrl ? (
            <img 
              src={userInfo.photoUrl} 
              alt={`${userInfo.firstName} ${userInfo.lastName}`} 
              className={styles.userAvatar} 
            />
          ) : (
            <div className={styles.defaultAvatar}>
              {userInfo?.firstName.charAt(0) || userInfo?.username.charAt(0) || '–ü'}
            </div>
          )}
          <div className={styles.userDetails}>
            <h1 className={styles.userName}>
              {userInfo?.firstName} {userInfo?.lastName}
            </h1>
            <p className={styles.userUsername}>@{userInfo?.username}</p>
          </div>
        </div>
      </div>
      
      {/* <div className={styles.bookingProgress}>
        <h3 className={styles.progressTitle}>–ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–∫–∞–∑–æ–≤</h3>
        <div className={styles.discountInfo}>
          <span className={styles.currentDiscount}>
            –¢–µ–∫—É—â–∞—è —Å–∫–∏–¥–∫–∞: <strong>{discount}%</strong>
          </span>
          {discount < 10 && (
            <span className={styles.nextDiscount}>
              –î–æ —Å–∫–∏–¥–∫–∏ {discount + 2}%: –µ—â–µ <strong>{(nextDiscountThreshold - totalHours).toFixed(1)}</strong> —á.
            </span>
          )}
        </div>
        <div className={styles.progressBar}>
          <div 
            className={styles.progressFilled} 
            style={{ width: `${calculateProgressToNextDiscount()}%` }}
          ></div>
        </div>
        <div className={styles.progressInfo}>
          <span>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤: <strong>{totalHours.toFixed(1)}</strong></span>
          {discount === 10 && (
            <div className={styles.maxDiscountBadge}>
              –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞!
            </div>
          )}
        </div>
      </div> */}

      {/* –°–µ–∫—Ü–∏—è –ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      <div className={styles.section}>
        <div 
          className={styles.sectionHeader} 
          onClick={() => setShowBookings(!showBookings)}
        >
          <h2 className={styles.sectionTitle}>–ú–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</h2>
          <div className={`${styles.arrow} ${showBookings ? styles.arrowUp : ''}`}></div>
        </div>
        
        {showBookings && (
          <div className={styles.bookingsList}>
            {bookingsError ? (
              <div className={styles.error}>{bookingsError}</div>
            ) : bookings.length > 0 ? (
              bookings.map(booking => (
                <div 
                  key={booking.id} 
                  className={styles.bookingItem}
                  onClick={() => handleBookingClick(booking.id)}
                >
                  <div className={styles.bookingDate}>
                    {(() => {
                      const timeInfo = formatBookingTimeDisplay(booking);
                      return (
                        <>
                          <div className={`${styles.date} ${timeInfo.isCrossing ? styles.crossingDate : ''}`}>
                            {timeInfo.isCrossing && <span className={styles.crossingIcon}>‚Ü™Ô∏è </span>}
                            {timeInfo.dateDisplay}
                            {timeInfo.isCrossing && <span className={styles.crossingIcon}> ‚Ü©Ô∏è</span>}
                          </div>
                          <div className={styles.time}>{timeInfo.timeDisplay}</div>
                        </>
                      );
                    })()}
                  </div>
                  <div className={styles.bookingInfo}>
                    <div className={styles.serviceName}>{booking.service}</div>
                  </div>
                  <div className={styles.bookingPrice}>
                    {booking.cost.toLocaleString()} ‚ÇΩ
                  </div>
                </div>
              ))
            ) : (
              <div className={styles.emptyList}>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π</div>
            )}
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—è–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {showBookingDetails && selectedBookingId && (
        <div 
          className={styles.modalOverlay}
          onClick={(e) => {
            if (e.target === e.currentTarget) {
              handleCloseBookingDetails();
            }
          }}
        >
          <div className={styles.modalContent}>
            <BookingDetails 
              bookingId={selectedBookingId} 
              onClose={handleCloseBookingDetails}
              onEdit={(bookingId) => {
                // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
              }}
              onCancel={(bookingId) => {
                if (window.confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ #${bookingId}?`)) {
                  deleteBooking(bookingId);
                }
              }}
            />
          </div>
        </div>
      )}

      {/* –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏ */}
      {deleteSuccess && (
        <div className={styles.successPopup}>
          <div className={styles.successPopupContent}>
            <div className={styles.successIcon}>‚úì</div>
            <p>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ</p>
          </div>
        </div>
      )}

      {/* –°–µ–∫—Ü–∏—è –ú–æ–∏ –ø–æ–∫—É–ø–∫–∏ */}
      {/* <div className={styles.section}>
        <div 
          className={styles.sectionHeader} 
          onClick={() => setShowPurchases(!showPurchases)}
        >
          <h2 className={styles.sectionTitle}>–ú–æ–∏ –ø–æ–∫—É–ø–∫–∏</h2>
          <div className={`${styles.arrow} ${showPurchases ? styles.arrowUp : ''}`}></div>
        </div>
        
        {showPurchases && (
          <div className={styles.purchasesList}>
            {purchases.length > 0 ? (
              purchases.map(purchase => (
                <div key={purchase.id} className={styles.purchaseItem}>
                  <div className={styles.purchaseImage}>
                    <img src={purchase.image} alt={purchase.name} />
                  </div>
                  <div className={styles.purchaseInfo}>
                    <div className={styles.purchaseName}>{purchase.name}</div>
                    <div className={styles.purchaseDate}>{formatDate(purchase.date)}</div>
                  </div>
                  <div className={styles.purchaseDetails}>
                    <div className={styles.purchaseQuantity}>{purchase.quantity} —à—Ç.</div>
                    <div className={styles.purchasePrice}>
                      {(purchase.price * purchase.quantity).toLocaleString()} ‚ÇΩ
                    </div>
                    <button 
                      className={`${styles.repeatButton} ${addedToCart[purchase.id] ? styles.repeatButtonSuccess : ''}`} 
                      onClick={(e) => {
                        e.stopPropagation();
                        handleAddToCart(purchase);
                      }}
                    >
                      {addedToCart[purchase.id] ? '–î–æ–±–∞–≤–ª–µ–Ω–æ!' : '–ü–æ–≤—Ç–æ—Ä–∏—Ç—å'}
                    </button>
                  </div>
                </div>
              ))
            ) : (
              <div className={styles.emptyList}>–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –ø–æ–∫—É–ø–æ–∫</div>
            )}
          </div>
        )}
      </div> */}
    </div>
  );
};

export default ProfilePage; 