import React, { useState, useEffect } from 'react';
import { useCart } from '../../context/CartContex';
import { Link, useNavigate, useLocation } from 'react-router-dom';
import styles from './CartPage.module.css';
import { products } from '../../data/products';
import defaultImage from '../../assets/shampoo.jpg';
import { CartItem } from '../../types';
import BookingModal from '../../components/BookingModal/BookingModal';
import BookingSuccess from '../BookingSuccess/BookingSuccess';
import { BookingDetails } from '../CalendarPage/calendarTypes';
import { sendTelegramMessage, formatAdminMessage, ADMIN_CHAT_ID, sendTelegramMessageToAllAdmins } from '../../api/telegram';
import api from '../../api/apiService';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–¥—É–∫—Ç–∞ –ø–æ ID
const getProductImage = (id: string | number): string => {
  const productId = typeof id === 'string' ? parseInt(id as string) : id;
  const product = products.find(p => p.id === productId);
  return product?.image || defaultImage;
};

const CartPage: React.FC = () => {
  const { items, updateQuantity, removeFromCart } = useCart();
  const navigate = useNavigate();
  const location = useLocation();
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [selectedTime, setSelectedTime] = useState<{ start: string; end: string } | null>(null);
  const [selectedService, setSelectedService] = useState<{ serviceName: string; price: number } | null>(null);
  const [showSuccess, setShowSuccess] = useState(false);
  const [successBookingDetails, setSuccessBookingDetails] = useState<BookingDetails | null>(null);

  // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ location state
  const bookingData = location.state?.bookingData;

  const handleProductClick = (productId: string) => {
    // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    const item = items.find(item => item.id === productId);
    if (item && item.type !== 'booking') {
      navigate(`/product/${productId}`);
    }
  };

  const handleUpdateQuantity = (itemId: string, delta: number, currentQuantity: number) => {
    const newQuantity = currentQuantity + delta;
    if (newQuantity <= 0) {
      removeFromCart(itemId);
    } else {
      updateQuantity(itemId, newQuantity);
    }
  };

  // –†–∞—Å—á–µ—Ç –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∫–æ—Ä–∑–∏–Ω—ã
  const totalCost = items.reduce((sum, item) => sum + item.price * item.quantity, 0);

  const handleBooking = async (formData: any) => {
    try {
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const timeMatches = formData.startTime.match(/\d{1,2}:\d{2}/g);
      if (!timeMatches || timeMatches.length === 0) {
        throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏');
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –∏ –∫–æ–Ω–µ—á–Ω–æ–µ –≤—Ä–µ–º—è
      const startTimeFormatted = timeMatches[0];  // –ü–µ—Ä–≤–æ–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
      const endTimeFormatted = timeMatches.length > 1 ? timeMatches[1] : startTimeFormatted;  // –í—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –ø–µ—Ä–≤–æ–µ, –µ—Å–ª–∏ –≤—Ç–æ—Ä–æ–≥–æ –Ω–µ—Ç

      // –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞–ª–∏–¥–Ω—ã–π –æ–±—ä–µ–∫—Ç Date
      const selectedDateObj = formData.selectedDate instanceof Date 
        ? new Date(formData.selectedDate) 
        : new Date(formData.selectedDate);
        
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
      const actualDay = selectedDateObj.getDate(); // –¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ (1-31)
      const actualMonth = selectedDateObj.getMonth() + 1; // –ú–µ—Å—è—Ü (1-12)
      const actualYear = selectedDateObj.getFullYear(); // –ì–æ–¥ –≤ 4-—Ö –∑–Ω–∞—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –≤–µ–¥—É—â–∏–º–∏ –Ω—É–ª—è–º–∏
      const year = actualYear.toString();
      const month = actualMonth.toString().padStart(2, '0');
      const day = actualDay.toString().padStart(2, '0');

      const dateStr = `${year}-${month}-${day}`;
      
      // –°–æ–∑–¥–∞–µ–º ISO —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const startISODate = `${dateStr}T${startTimeFormatted}:00`;
      const endISODate = `${dateStr}T${endTimeFormatted}:00`;
      
      // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
      const bookingCost = formData.service?.price || 0;
      const productsTotal = items.reduce((sum, item) => sum + (item.type === 'product' ? item.price * item.quantity : 0), 0);
      const totalCost = bookingCost + productsTotal;
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è BookingSuccess
      const bookingDetails: BookingDetails = {
        date: formData.selectedDate,
        timeRange: formData.startTime,
        duration: 1, // –∏–ª–∏ –≤—ã—á–∏—Å–ª–∏ –∏–∑ –≤—Ä–µ–º–µ–Ω–∏
        plan: {
          id: bookingItem?.id || 'custom',
          title: formData.service?.serviceName || '–¢–æ–≤–∞—Ä—ã',
          price: formData.service?.price || 0,
          icon: bookingItem?.icon || '',
          description: ''
        },
        totalPrice: totalCost
      };
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è API
      const chatId = '0';
      const apiData = {
        telegramUserId: chatId,
        telegramUserName: formData.telegramUserName?.startsWith('@') 
          ? formData.telegramUserName 
          : `@${formData.telegramUserName || ''}`,
        clientName: formData.name || '',
        clientPhone: (formData.phone || '').replace(/\+/g, ''),
        clientEmail: formData.email || '',
        start: startISODate,
        end: endISODate,
        service: formData.service 
          ? [{
              serviceName: formData.service.serviceName || '',
              price: formData.service.price || 0
            }]
          : [],
        notes: ''
      };
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      const response = await api.post('/calendar/booking', apiData);
      
      // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
      const result = response.data;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
      const isTech = (formData.service?.serviceName || '').toLowerCase().includes('—Ç–µ—Ö–Ω–∏—á–µ—Å');
      
      console.log('üì≤ CartPage - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', {
        apiData: apiData,
        serviceData: formData.service || { price: 0 },
        serviceName: formData.service?.serviceName || '',
        isTech: isTech,
        timestamp: new Date().toISOString()
      });
      
      console.log('üì§ CartPage - –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º...');
      
      try {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
        await sendTelegramMessageToAllAdmins(
          formatAdminMessage(apiData, formData.service || { price: 0 }, formData.service?.serviceName || '')
        );
        console.log('‚úÖ CartPage - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      } catch (telegramError: any) {
        console.error('‚ùå CartPage - –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram:', {
          error: telegramError.message,
          stack: telegramError.stack
        });
        console.warn('‚ö†Ô∏è CartPage - –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏');
      }
      
      // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
      setSuccessBookingDetails(bookingDetails);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
    }
  };

  // –ù–∞—Ö–æ–¥–∏–º –±—Ä–æ–Ω–∏—Ä—É–µ–º—É—é —É—Å–ª—É–≥—É
  const bookingItem = items.find(item => item.type === 'booking');

  if (successBookingDetails) {
    return <BookingSuccess bookingDetails={successBookingDetails} />;
  }

  // if (items.length === 0) {
  //   return (
  //     <div className={styles.cartPage}>
  //       <h1 className={styles.pageTitle}>–ö–æ—Ä–∑–∏–Ω–∞</h1>
  //       <div className={styles.cartPageContainer}>
  //         <p className={styles.emptyCartMsg}>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</p>
  //         <Link to="/products" className={styles.goToCatalogBtn}>–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥</Link>
  //       </div>
  //     </div>
  //   );
  // }

  return (
    <div className={styles.cartPage}>
      <h1 className={styles.pageTitle}>–ö–æ—Ä–∑–∏–Ω–∞</h1>
      <div className={styles.cartContainer}>
        <div className={styles.cartItems}>
          {items.map((item: CartItem) => (
            <div key={item.id} className={styles.cartItem}>
              <div 
                className={`${styles.itemImage} ${item.type === 'booking' ? styles.bookingImage : ''}`} 
                onClick={() => handleProductClick(item.id)}
              >
                {item.type === 'booking' && item.icon ? (
                  <div className={styles.bookingIcon} dangerouslySetInnerHTML={{ __html: item.icon }} />
                ) : (
                  <img src={getProductImage(item.id)} alt={item.name} />
                )}
              </div>
              <div className={styles.itemInfo} onClick={() => handleProductClick(item.id)}>
                <h3 className={styles.itemName}>{item.name}</h3>
                {/* {item.details && <div className={styles.itemDetails}>{item.details}</div>} */}
                {/* <div className={styles.itemPrice}>{item.price} ‚ÇΩ</div> */}
              </div>
              <div className={styles.itemControls}>
                <div className={styles.quantityControls}>
                  <button 
                    className={styles.quantityBtn} 
                    onClick={() => handleUpdateQuantity(item.id, -1, item.quantity)}
                  >
                    -
                  </button>
                  <span className={styles.quantity}>{item.quantity}</span>
                  <button 
                    className={styles.quantityBtn} 
                    onClick={() => handleUpdateQuantity(item.id, 1, item.quantity)}
                  >
                    +
                  </button>
                </div>
                <div className={styles.itemTotal}>{item.price * item.quantity} ‚ÇΩ</div>
                <button 
                  className={styles.removeBtn} 
                  onClick={() => removeFromCart(item.id)}
                >
                  –£–¥–∞–ª–∏—Ç—å
                </button>
              </div>
            </div>
          ))}
        </div>
        <div className={styles.cartSummary}>
          <div className={styles.summaryRow}>
            <span>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</span>
            <span>{totalCost} ‚ÇΩ</span>
          </div>
          <div className={styles.summaryRow}>
            <span>–°–∫–∏–¥–∫–∞:</span>
            <span>0 ‚ÇΩ</span>
          </div>
          <div className={styles.summaryRow}>
            <span>–ò—Ç–æ–≥–æ:</span>
            <span className={styles.totalPrice}>{totalCost} ‚ÇΩ</span>
          </div>
          <button 
            onClick={async () => {
              // –ù–∞—Ö–æ–¥–∏–º booking item –≤ –∫–æ—Ä–∑–∏–Ω–µ
              const bookingItem = items.find(item => item.type === 'booking');
              
              // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
              let startTimeStr = '';
              let endTimeStr = '';
              
              // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º service –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
              let serviceObj = null;
              
              if (bookingItem) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–æ—Ä–∑–∏–Ω–µ
                serviceObj = {
                  serviceName: bookingItem.name.split('(')[0].trim(),
                  price: bookingItem.price // –¶–µ–Ω–∞ –∑–∞ —á–∞—Å, –Ω–µ —É–º–Ω–æ–∂–µ–Ω–Ω–∞—è –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
                };
                
                // –ò –ø–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
                if (bookingItem.details) {
                  const timeRange = bookingItem.details.split('|')[1]?.trim();
                  if (timeRange) {
                    if (timeRange.includes('-')) {
                      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "XX:XX - YY:YY"
                      const [start, end] = timeRange.split('-').map(t => t.trim());
                      startTimeStr = start;
                      endTimeStr = end;
                    } else {
                      // –ü—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º
                      startTimeStr = timeRange;
                      endTimeStr = timeRange;
                    }
                  }
                }
              } else if (bookingData) {
                // –ï—Å–ª–∏ –Ω–µ—Ç –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, –Ω–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ location state
                const hourlyRate = 800; // –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ –∑–∞ —á–∞—Å
                serviceObj = {
                  serviceName: bookingData.serviceName,
                  price: hourlyRate // –ü–µ—Ä–µ–¥–∞–µ–º —Ü–µ–Ω—É –∑–∞ —á–∞—Å, –Ω–µ —É–º–Ω–æ–∂–µ–Ω–Ω—É—é –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
                };
                startTimeStr = bookingData.startTime;
                endTimeStr = bookingData.endTime;
              }
              
              // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∏ —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
              setSelectedTime({ 
                start: startTimeStr, 
                end: endTimeStr || startTimeStr 
              });
              
              setSelectedService(serviceObj);
              
              // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
              setIsModalOpen(true);
            }}
            className={styles.bookButton}
          >
            –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
          </button>
        </div>
      </div>
      {!showSuccess && isModalOpen && selectedTime && (
        <BookingModal
          isOpen={isModalOpen}
          onClose={() => setIsModalOpen(false)}
          startTime={selectedTime.start}
          endTime={selectedTime.end}
          // duration –Ω–∞–º–µ—Ä–µ–Ω–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è - BookingModal –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fallback –ª–æ–≥–∏–∫—É
          service={selectedService}
          onSubmit={handleBooking}
          selectedDate={bookingData?.selectedDate}
          isAdmin={false}
          startTimeContext={undefined}
          endTimeContext={undefined}
        />
      )}
    </div>
  );
};

export default CartPage; 