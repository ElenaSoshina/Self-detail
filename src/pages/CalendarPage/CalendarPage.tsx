import React, { useState, useEffect } from 'react';
import styles from './CalendarPage.module.css';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../../context/CartContex';
import { v4 as uuidv4 } from 'uuid'; // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
import axios from 'axios';
import CalendarMonth from './CalendarMonth';
import TimeSlots from './TimeSlots';
import PlanSelection from './PlanSelection';
import BookingSuccess from './BookingSuccess';
import { useCalendarApi } from './useCalendarApi';
import { useBooking } from './useBooking';
import {
  Day,
  PricingPlan,
  BookingDetails,
  TimeSlotWithData,
  AvailabilityData
} from './calendarTypes';
import { generateDaysForMonth, isSameDay, formatDate, calculateMaxAvailableHours } from './calendarUtils';
import { months, weekDays } from './calendarConstants';
import BookingSummary from './BookingSummary';

interface CalendarPageProps {
  isAdmin?: boolean;
}

const CalendarPage: React.FC<CalendarPageProps> = ({ isAdmin }) => {
  const navigate = useNavigate();
  const { addToCart } = useCart();
  const [currentDate, setCurrentDate] = useState(new Date());
  const [days, setDays] = useState<Day[]>([]);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [availableTimeSlots, setAvailableTimeSlots] = useState<string[]>([]);
  const [timeSlotData, setTimeSlotData] = useState<TimeSlotWithData[]>([]);
  const [startTime, setStartTime] = useState<string | null>(null);
  const [endTime, setEndTime] = useState<string | null>(null);
  const [maxAvailableHours, setMaxAvailableHours] = useState<number>(8); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  const [bookingDetails, setBookingDetails] = useState<BookingDetails | null>(null);
  const [bookingCompleted, setBookingCompleted] = useState(false);
  const [loadingSlots, setLoadingSlots] = useState(true); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
  const [slotsError, setSlotsError] = useState<string | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);

  // –î–∞–Ω–Ω—ã–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
  const pricingPlans: PricingPlan[] = [
    {
      id: 'wash',
      title: '–ú–æ–π–∫–∞ –∞–≤—Ç–æ',
      price: 800,
      icon: 'üí¶',
      description: '–ê–í–î, –ø–µ–Ω–æ–∫–æ–º–ø–ª–µ–∫—Ç—ã, –∞–≤—Ç–æ—à–∞–º–ø—É–Ω—å, –≤–æ—Å–∫, –≤–æ–¥—Å–≥–æ–Ω, –≥—É–±–∫–∏, —Ç—Ä—è–ø–∫–∏, –ø—ã–ª–µ—Å–æ—Å.'
    },
    {
      id: 'dry',
      title: '–°—É—Ö–æ–π –ø–æ—Å—Ç',
      price: 500,
      icon: 'üîå',
      description: '–†–æ–∑–µ—Ç–∫–∞ 220V –∏ –≤–æ–∑–¥—É—Ö –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤–æ–∏–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.'
    },
    {
      id: 'cleaning',
      title: '–•–∏–º—á–∏—Å—Ç–∫–∞',
      price: 800,
      icon: 'üßΩ',
      description: '–¢–æ—Ä–Ω–∞–¥–æ—Ä, –º–æ—é—â–∏–π –ø—ã–ª–µ—Å–æ—Å, —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ö–∏–º—á–∏—Å—Ç–∫–∏ —Ç–∫–∞–Ω–µ–≤—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –∏ –∫–æ–∂–∏.'
    },
    {
      id: 'polish',
      title: '–ü–æ–ª–∏—Ä–æ–≤–∫–∞',
      price: 800,
      icon: '‚ú®',
      description: '–ü–æ–ª–∏—Ä–æ–≤–æ—á–Ω–∞—è –º–∞—à–∏–Ω–∫–∞, –ø–æ–¥–ª–æ–∂–∫–∏, —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ö–∏–º. —á–∏—Å—Ç–∫–∏ –∫—É–∑–æ–≤–∞. –ü–∞—Å—Ç–∞ –∏ –∫—Ä—É–≥–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã.'
    },
    ...(isAdmin ? [{
      id: 'tech',
      title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã',
      price: 0,
      icon: 'üõ†Ô∏è',
      description: '–°–ª–æ—Ç –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ä–∞–±–æ—Ç. –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.'
    }] : [])
  ];

  // –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const { fetchAvailableTimeSlots, loading, error } = useCalendarApi();

  // useEffect –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
  useEffect(() => {
    if (isInitialized) return; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
    
    const init = async () => {
      const daysArray = generateDaysForMonth(
        currentDate.getFullYear(),
        currentDate.getMonth()
      );
      setDays(daysArray);
      const today = new Date();
      today.setHours(0, 0, 0, 0);
      const todayDay = daysArray.find(day => day.isToday && day.isAvailable);
      
      setIsInitialized(true); // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ
      
      if (todayDay) {
        setSelectedDate(todayDay.date);
        setLoadingSlots(true);
        try {
          const { formattedTimeSlots, timeSlotsWithData } = await fetchAvailableTimeSlots(todayDay.date);
          setAvailableTimeSlots(formattedTimeSlots);
          setTimeSlotData(timeSlotsWithData);
          setLoadingSlots(false);
        } catch (e) {
          setSlotsError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤.');
          setAvailableTimeSlots([]);
          setTimeSlotData([]);
          setLoadingSlots(false);
        }
      } else {
        setLoadingSlots(false);
      }
    };
    
    init();
  }, [isInitialized, fetchAvailableTimeSlots]); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // useEffect –¥–ª—è —Å–º–µ–Ω—ã –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
  useEffect(() => {
    // –ï—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –µ—â—ë –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if (!selectedDate || !isInitialized) return;
    
    // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–∞
    let isActive = true;
    
    const fetchSlots = async () => {
      setLoadingSlots(true);
      try {
        const { formattedTimeSlots, timeSlotsWithData } = await fetchAvailableTimeSlots(selectedDate);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç—É–∞–ª–µ–Ω –ª–∏ –µ—â–µ –∑–∞–ø—Ä–æ—Å
        if (isActive) {
          setAvailableTimeSlots(formattedTimeSlots);
          setTimeSlotData(timeSlotsWithData);
          setLoadingSlots(false);
          setStartTime(null);
          setEndTime(null);
          setBookingDetails(null);
          setBookingCompleted(false);
        }
      } catch (e) {
        if (isActive) {
          setSlotsError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤.');
          setAvailableTimeSlots([]);
          setTimeSlotData([]);
          setLoadingSlots(false);
        }
      }
    };
    
    fetchSlots();
    
    // –§—É–Ω–∫—Ü–∏—è cleanup –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ—Å–ª–µ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    return () => {
      isActive = false;
    };
  }, [selectedDate, isInitialized, fetchAvailableTimeSlots]); // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ - –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞
  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è –º–µ—Å—è—Ü
    const month = currentDate.getMonth();
    const year = currentDate.getFullYear();
    
    // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –∏ –≥–æ–¥ –≤ ref –∏–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    if (isInitialized && days.length > 0) {
      // –ü–æ–ª—É—á–∞–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –≤ –º–∞—Å—Å–∏–≤–µ
      const currentMonth = days[15].date.getMonth(); // –ë–µ—Ä–µ–º –¥–µ–Ω—å –≤ —Å–µ—Ä–µ–¥–∏–Ω–µ –º–∞—Å—Å–∏–≤–∞
      const currentYear = days[15].date.getFullYear();
      
      // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
      if (month === currentMonth && year === currentYear) {
        // –ú–µ—Å—è—Ü –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        return;
      }
      
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞:', currentDate);
      const daysArray = generateDaysForMonth(year, month);
      setDays(daysArray);
    }
  }, [currentDate, days.length, isInitialized]);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
  const goToPreviousMonth = () => {
    setCurrentDate(prevDate => {
      const newDate = new Date(prevDate);
      newDate.setMonth(prevDate.getMonth() - 1);
      return newDate;
    });
    setSelectedDate(null);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
  const goToNextMonth = () => {
    setCurrentDate(prevDate => {
      const newDate = new Date(prevDate);
      newDate.setMonth(prevDate.getMonth() + 1);
      return newDate;
    });
    setSelectedDate(null);
  };

  // handleDateClick —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ—Ç selectedDate
  const handleDateClick = (day: Day) => {
    if (day.isAvailable) {
      setSelectedDate(day.date);
    }
  };

  // handleTimeSlotClick —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞–µ—Ç —Å –¥–≤—É–º—è —Å–ª–æ—Ç–∞–º–∏
  const handleTimeSlotClick = (slot: string) => {
    if (!startTime || (startTime && endTime)) {
      setStartTime(slot);
      setEndTime(null);
    } else if (startTime && !endTime) {
      if (slot === startTime) {
        setStartTime(null);
        setEndTime(null);
      } else {
        setEndTime(slot);
      }
    }
  };

  // –†–∞—Å—á—ë—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –∞—Ä–µ–Ω–¥—ã
  let duration = null;
  if (startTime && endTime) {
    const start = timeSlotData.find(s => s.formattedTime === startTime)?.start;
    const end = timeSlotData.find(s => s.formattedTime === endTime)?.start;
    if (start && end) {
      const diff = Math.abs((end.getTime() - start.getTime()) / (1000 * 60 * 60));
      duration = diff > 0 ? diff : null;
    }
  }

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addBookingToCart = () => {
    if (bookingDetails) {
      const formattedDate = formatDate(bookingDetails.date);
      const bookingItem = {
        id: uuidv4(),
        name: `${bookingDetails.plan.title} (${formattedDate}, ${bookingDetails.timeRange})`,
        price: bookingDetails.totalPrice,
        type: 'booking',
        region: '',
        details: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${bookingDetails.duration.toFixed(2)} —á. | ${bookingDetails.timeRange}`,
        icon: bookingDetails.plan.icon,
      };
      addToCart(bookingItem);
      navigate('/');
    }
  };

  // –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const goToProducts = () => {
    if (bookingDetails) {
      const formattedDate = formatDate(bookingDetails.date);
      const bookingItem = {
        id: uuidv4(),
        name: `${bookingDetails.plan.title} (${formattedDate}, ${bookingDetails.timeRange})`,
        price: bookingDetails.totalPrice,
        type: 'booking',
        region: '',
        details: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${bookingDetails.duration.toFixed(2)} —á. | ${bookingDetails.timeRange}`,
        icon: bookingDetails.plan.icon,
      };
      addToCart(bookingItem);
      navigate('/products');
    }
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const currentMonthYear = `${months[currentDate.getMonth()]} ${currentDate.getFullYear()}`;

  // –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const calculateTotalPrice = () => {
    if (!selectedPlan) return 0;
    return selectedPlan.price * hours;
  };

  const { selectedPlan, setSelectedPlan, hours, setHours, handlePlanClick, handleHoursChange, handleBooking } = useBooking();

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  let timeRange = '';
  if (startTime && endTime) {
    const startIdx = availableTimeSlots.indexOf(startTime);
    const endIdx = availableTimeSlots.indexOf(endTime);
    if (startIdx !== -1 && endIdx !== -1) {
      const [from, to] = startIdx < endIdx ? [startIdx, endIdx] : [endIdx, startIdx];
      timeRange = `${availableTimeSlots[from]} ‚Äî ${availableTimeSlots[to]}`;
    }
  }
  // duration
  let calcDuration: number | null = null;
  if (startTime && endTime) {
    const start = timeSlotData.find(s => s.formattedTime === startTime)?.start;
    const end = timeSlotData.find(s => s.formattedTime === endTime)?.start;
    if (start && end) {
      const diff = Math.abs((end.getTime() - start.getTime()) / (1000 * 60 * 60));
      calcDuration = diff > 0 ? diff : null;
    }
  }
  const totalPrice = selectedPlan && calcDuration ? selectedPlan.price * calcDuration : 0;

  // onBook —Ç–µ–ø–µ—Ä—å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ bookingDetails
  const onBook = () => {
    if (selectedDate && startTime && endTime && selectedPlan && calcDuration && timeRange) {
      setBookingDetails({
        date: selectedDate,
        timeRange,
        duration: calcDuration,
        plan: selectedPlan,
        totalPrice
      });
      setBookingCompleted(true);
    }
  };

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –º–∞—Å—Å–∏–≤ —Å–ª–æ—Ç–æ–≤ –∑–∞ —Å—É—Ç–∫–∏ (00:00-01:00 ... 23:00-00:00)
  const allDaySlots: { formattedTime: string; start: string; end: string }[] = [];
  for (let h = 0; h < 24; h++) {
    const start = `${h < 10 ? '0' + h : h}:00`;
    const end = `${(h + 1) < 10 ? '0' + (h + 1) : (h + 1 === 24 ? '00' : h + 1)}:00`;
    allDaySlots.push({
      formattedTime: start,
      start,
      end
    });
  }

  return (
    <div className={isAdmin ? `${styles.calendarContainer} ${styles.admin}` : styles.calendarContainer}>
      {!bookingCompleted && (
        <div className={styles.calendarHeader}>
          <h1 className={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</h1>
          {!isAdmin && (
            <button className={styles.backButton} onClick={() => navigate('/')}>–ù–∞–∑–∞–¥</button>
          )}
        </div>
      )}
      {!bookingCompleted ? (
        <div className={styles.calendarContent}>
          <div className={styles.calendar}>
            <div className={styles.calendarNav}>
              <button className={styles.navButton} onClick={goToPreviousMonth}>&#10094;</button>
              <h2 className={styles.currentMonth}>{currentMonthYear}</h2>
              <button className={styles.navButton} onClick={goToNextMonth}>&#10095;</button>
            </div>
            <div className={styles.weekdays}>
              {weekDays.map(day => (
                <div key={day} className={styles.weekday}>{day}</div>
              ))}
            </div>
            <CalendarMonth
              days={days}
              selectedDate={selectedDate}
              onDateClick={handleDateClick}
              isSameDay={isSameDay}
            />
          </div>
          <div className={styles.bookingSelection}>
            <TimeSlots
              selectedDate={selectedDate}
              loadingSlots={loadingSlots}
              slotsError={slotsError}
              allDaySlots={allDaySlots}
              availableTimeSlots={availableTimeSlots}
              startTime={startTime}
              endTime={endTime}
              onTimeSlotClick={handleTimeSlotClick}
              formatDate={formatDate}
            />
            {duration && (
              <>
                <PlanSelection
                  pricingPlans={pricingPlans}
                  selectedPlan={selectedPlan}
                  onPlanClick={handlePlanClick}
                />
                {selectedPlan && (
                  <BookingSummary
                    selectedDate={selectedDate}
                    startTime={startTime}
                    endTime={endTime}
                    duration={duration}
                    selectedPlan={selectedPlan}
                    onBook={onBook}
                    formatDate={formatDate}
                  />
                )}
              </>
            )}
          </div>
        </div>
      ) : (
        bookingDetails && (
          <BookingSuccess
            bookingDetails={bookingDetails}
            formatDate={formatDate}
            goToProducts={goToProducts}
            addBookingToCart={addBookingToCart}
            onBack={() => setBookingCompleted(false)}
          />
        )
      )}
    </div>
  );
};

export default CalendarPage; 