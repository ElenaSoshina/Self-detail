import React, { useState, useEffect } from 'react';
import styles from './CalendarPage.module.css';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../../context/CartContex';
import { v4 as uuidv4 } from 'uuid'; // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID

interface Day {
  date: Date;
  isCurrentMonth: boolean;
  isToday: boolean;
  isAvailable: boolean;
}

interface PricingPlan {
  id: string;
  title: string;
  price: number;
  icon: string;
  description: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
interface BookingDetails {
  id: string;
  date: Date;
  time: string;
  plan: PricingPlan;
  hours: number;
  totalPrice: number;
}

const CalendarPage: React.FC = () => {
  const navigate = useNavigate();
  const { addToCart } = useCart();
  const [currentDate, setCurrentDate] = useState(new Date());
  const [days, setDays] = useState<Day[]>([]);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [availableTimeSlots, setAvailableTimeSlots] = useState<string[]>([]);
  const [selectedTime, setSelectedTime] = useState<string | null>(null);
  const [selectedPlan, setSelectedPlan] = useState<PricingPlan | null>(null);
  const [hours, setHours] = useState<number>(1);
  const [bookingDetails, setBookingDetails] = useState<BookingDetails | null>(null);
  const [bookingCompleted, setBookingCompleted] = useState(false);

  // –î–∞–Ω–Ω—ã–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
  const pricingPlans: PricingPlan[] = [
    {
      id: 'wash',
      title: '–ú–æ–π–∫–∞ –∞–≤—Ç–æ',
      price: 800,
      icon: 'üí¶',
      description: '–ê–í–î, –ø–µ–Ω–æ–∫–æ–º–ø–ª–µ–∫—Ç—ã, –∞–≤—Ç–æ—à–∞–º–ø—É–Ω—å, –≤–æ—Å–∫, –≤–æ–¥—Å–≥–æ–Ω, –≥—É–±–∫–∏, —Ç—Ä—è–ø–∫–∏, –ø—ã–ª–µ—Å–æ—Å.'
    },
    {
      id: 'dry',
      title: '–°—É—Ö–æ–π –ø–æ—Å—Ç',
      price: 500,
      icon: 'üîå',
      description: '–†–æ–∑–µ—Ç–∫–∞ 220V –∏ –≤–æ–∑–¥—É—Ö –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤–æ–∏–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.'
    },
    {
      id: 'cleaning',
      title: '–•–∏–º—á–∏—Å—Ç–∫–∞',
      price: 800,
      icon: 'üßΩ',
      description: '–¢–æ—Ä–Ω–∞–¥–æ—Ä, –º–æ—é—â–∏–π –ø—ã–ª–µ—Å–æ—Å, —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ö–∏–º—á–∏—Å—Ç–∫–∏ —Ç–∫–∞–Ω–µ–≤—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –∏ –∫–æ–∂–∏.'
    },
    {
      id: 'polish',
      title: '–ü–æ–ª–∏—Ä–æ–≤–∫–∞',
      price: 800,
      icon: '‚ú®',
      description: '–ü–æ–ª–∏—Ä–æ–≤–æ—á–Ω–∞—è –º–∞—à–∏–Ω–∫–∞, –ø–æ–¥–ª–æ–∂–∫–∏, —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ö–∏–º. —á–∏—Å—Ç–∫–∏ –∫—É–∑–æ–≤–∞. –ü–∞—Å—Ç–∞ –∏ –∫—Ä—É–≥–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã.'
    }
  ];

  // –ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
  const months = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
  ];

  // –ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  const weekDays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–Ω–µ–π –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  useEffect(() => {
    const daysArray = generateDaysForMonth(
      currentDate.getFullYear(),
      currentDate.getMonth()
    );
    setDays(daysArray);
  }, [currentDate]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã
  useEffect(() => {
    if (selectedDate) {
      // –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
      // –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
      const slots = generateMockTimeSlots(selectedDate);
      setAvailableTimeSlots(slots);
    } else {
      setAvailableTimeSlots([]);
    }
    setSelectedTime(null);
    setSelectedPlan(null);
    setBookingDetails(null);
    setBookingCompleted(false);
  }, [selectedDate]);

  // –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    setSelectedPlan(null);
    setBookingDetails(null);
    setBookingCompleted(false);
  }, [selectedTime]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
  const generateDaysForMonth = (year: number, month: number): Day[] => {
    const result: Day[] = [];
    const firstDayOfMonth = new Date(year, month, 1);
    const lastDayOfMonth = new Date(year, month + 1, 0);
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞ (0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    let firstDayWeekday = firstDayOfMonth.getDay() || 7;
    firstDayWeekday = firstDayWeekday === 0 ? 7 : firstDayWeekday; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–∑ 0 –≤ 7
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const daysFromPrevMonth = firstDayWeekday - 1;
    const prevMonth = new Date(year, month, 0);
    for (let i = prevMonth.getDate() - daysFromPrevMonth + 1; i <= prevMonth.getDate(); i++) {
      const date = new Date(year, month - 1, i);
      result.push({
        date,
        isCurrentMonth: false,
        isToday: isSameDay(date, new Date()),
        isAvailable: false // –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const today = new Date();
    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {
      const date = new Date(year, month, i);
      const isDateAvailable = date >= today; // –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –±—É–¥—É—â–∏–µ –¥–∞—Ç—ã
      
      result.push({
        date,
        isCurrentMonth: true,
        isToday: isSameDay(date, today),
        isAvailable: isDateAvailable
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ—Ç–∫—É (–¥–æ 42 –¥–Ω–µ–π - 6 –Ω–µ–¥–µ–ª—å)
    const remainingDays = 42 - result.length;
    for (let i = 1; i <= remainingDays; i++) {
      const date = new Date(year, month + 1, i);
      result.push({
        date,
        isCurrentMonth: false,
        isToday: isSameDay(date, today),
        isAvailable: true // –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
      });
    }
    
    return result;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
  const isSameDay = (date1: Date, date2: Date) => {
    return (
      date1.getDate() === date2.getDate() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getFullYear() === date2.getFullYear()
    );
  };

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ (–∏–º–∏—Ç–∞—Ü–∏—è)
  const generateMockTimeSlots = (date: Date): string[] => {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã API-–∑–∞–ø—Ä–æ—Å
    const slots = [];
    const startHour = 9;
    const endHour = 20;
    
    // –°–ª—É—á–∞–π–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã
    for (let hour = startHour; hour <= endHour; hour++) {
      // 50% —à–∞–Ω—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–∞–∂–¥–æ–≥–æ —á–∞—Å–∞
      if (Math.random() > 0.5) {
        slots.push(`${hour}:00`);
      }
      
      // 30% —à–∞–Ω—Å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ–ª—É—á–∞—Å–æ–≤—ã—Ö —Å–ª–æ—Ç–æ–≤
      if (Math.random() > 0.7) {
        slots.push(`${hour}:30`);
      }
    }
    
    return slots.sort();
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
  const goToPreviousMonth = () => {
    setCurrentDate(prevDate => {
      const newDate = new Date(prevDate);
      newDate.setMonth(prevDate.getMonth() - 1);
      return newDate;
    });
    setSelectedDate(null);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
  const goToNextMonth = () => {
    setCurrentDate(prevDate => {
      const newDate = new Date(prevDate);
      newDate.setMonth(prevDate.getMonth() + 1);
      return newDate;
    });
    setSelectedDate(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  const handleDateClick = (day: Day) => {
    if (day.isAvailable) {
      setSelectedDate(day.date);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
  const handleTimeSlotClick = (timeSlot: string) => {
    setSelectedTime(timeSlot);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
  const handlePlanClick = (plan: PricingPlan) => {
    setSelectedPlan(plan);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤
  const handleHoursChange = (newHours: number) => {
    setHours(Math.max(1, Math.min(newHours, 8))); // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 1 –¥–æ 8 —á–∞—Å–æ–≤
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleBooking = () => {
    if (selectedDate && selectedTime && selectedPlan) {
      const booking: BookingDetails = {
        id: uuidv4(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        date: selectedDate,
        time: selectedTime,
        plan: selectedPlan,
        hours: hours,
        totalPrice: selectedPlan.price * hours
      };
      
      setBookingDetails(booking);
      setBookingCompleted(true);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addBookingToCart = () => {
    if (bookingDetails) {
      const formattedDate = formatDate(bookingDetails.date);
      const bookingItem = {
        id: bookingDetails.id,
        name: `${bookingDetails.plan.title} (${formattedDate}, ${bookingDetails.time})`,
        price: bookingDetails.totalPrice, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—Å–µ —á–∞—Å—ã
        type: 'booking',
        region: '',
        details: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${bookingDetails.hours} —á. | ${bookingDetails.time}`,
        icon: bookingDetails.plan.icon, // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–∞—Ä–∏—Ñ–∞
      };

      addToCart(bookingItem);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      navigate('/');
    }
  };

  // –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const goToProducts = () => {
    if (bookingDetails) {
      const formattedDate = formatDate(bookingDetails.date);
      const bookingItem = {
        id: bookingDetails.id,
        name: `${bookingDetails.plan.title} (${formattedDate}, ${bookingDetails.time})`,
        price: bookingDetails.totalPrice, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—Å–µ —á–∞—Å—ã
        type: 'booking',
        region: '',
        details: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${bookingDetails.hours} —á. | ${bookingDetails.time}`,
        icon: bookingDetails.plan.icon, // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–∞—Ä–∏—Ñ–∞
      };

      addToCart(bookingItem);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
      navigate('/products');
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (date: Date): string => {
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const currentMonthYear = `${months[currentDate.getMonth()]} ${currentDate.getFullYear()}`;

  // –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const calculateTotalPrice = () => {
    if (!selectedPlan) return 0;
    return selectedPlan.price * hours;
  };

  return (
    <div className={styles.calendarContainer}>
      <div className={styles.calendarHeader}>
        <h1 className={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</h1>
        <button className={styles.backButton} onClick={() => navigate('/')}>
          –ù–∞–∑–∞–¥
        </button>
      </div>
      
      {!bookingCompleted ? (
        <div className={styles.calendarContent}>
          <div className={styles.calendar}>
            <div className={styles.calendarNav}>
              <button 
                className={styles.navButton} 
                onClick={goToPreviousMonth}
              >
                &#10094;
              </button>
              <h2 className={styles.currentMonth}>{currentMonthYear}</h2>
              <button 
                className={styles.navButton} 
                onClick={goToNextMonth}
              >
                &#10095;
              </button>
            </div>
            
            <div className={styles.weekdays}>
              {weekDays.map(day => (
                <div key={day} className={styles.weekday}>{day}</div>
              ))}
            </div>
            
            <div className={styles.daysGrid}>
              {days.map((day, index) => (
                <div 
                  key={index}
                  className={`
                    ${styles.day} 
                    ${!day.isCurrentMonth ? styles.otherMonth : ''} 
                    ${day.isToday ? styles.today : ''} 
                    ${day.isAvailable ? styles.available : styles.unavailable}
                    ${selectedDate && isSameDay(day.date, selectedDate) ? styles.selected : ''}
                  `}
                  onClick={() => handleDateClick(day)}
                >
                  {day.date.getDate()}
                  {day.isToday && <span className={styles.todayMark}></span>}
                </div>
              ))}
            </div>
          </div>
          
          <div className={styles.bookingSelection}>
            {/* –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ */}
            <div className={styles.timeSelection}>
              {selectedDate ? (
                <>
                  <h3 className={styles.sectionTitle}>
                    {formatDate(selectedDate)}
                  </h3>
                  
                  {availableTimeSlots.length > 0 ? (
                    <div className={styles.timeSlots}>
                      {availableTimeSlots.map(time => (
                        <button 
                          key={time}
                          className={`${styles.timeSlot} ${selectedTime === time ? styles.selectedTime : ''}`}
                          onClick={() => handleTimeSlotClick(time)}
                        >
                          {time}
                        </button>
                      ))}
                    </div>
                  ) : (
                    <div className={styles.noTimeSlotsMessage}>
                      –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                    </div>
                  )}
                </>
              ) : (
                <div className={styles.selectDateMessage}>
                  –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                </div>
              )}
            </div>
            
            {/* –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ */}
            {selectedTime && (
              <div className={styles.planSelection}>
                <h3 className={styles.sectionTitle}>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ</h3>
                
                <div className={styles.planGrid}>
                  {pricingPlans.map((plan) => (
                    <div 
                      key={plan.id}
                      className={`${styles.planCard} ${selectedPlan?.id === plan.id ? styles.selectedPlan : ''}`}
                      onClick={() => handlePlanClick(plan)}
                    >
                      <div className={styles.planIcon}>{plan.icon}</div>
                      <h4 className={styles.planTitle}>{plan.title}</h4>
                      <div className={styles.planPrice}>{plan.price} ‚ÇΩ/—á</div>
                      <p className={styles.planDescription}>{plan.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {/* –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ */}
            {selectedPlan && (
              <div className={styles.durationSelection}>
                <h3 className={styles.sectionTitle}>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
                
                <div className={styles.hoursControls}>
                  <button 
                    className={styles.hoursButton}
                    onClick={() => handleHoursChange(hours - 1)}
                    disabled={hours <= 1}
                  >
                    -
                  </button>
                  <div className={styles.hoursDisplay}>
                    <span className={styles.hoursValue}>{hours}</span> —á.
                  </div>
                  <button 
                    className={styles.hoursButton}
                    onClick={() => handleHoursChange(hours + 1)}
                    disabled={hours >= 8}
                  >
                    +
                  </button>
                </div>
                
                <div className={styles.totalPrice}>
                  <span>–ò—Ç–æ–≥–æ:</span>
                  <span className={styles.priceValue}>{calculateTotalPrice()} ‚ÇΩ</span>
                </div>
                
                <button 
                  className={styles.bookButton}
                  onClick={handleBooking}
                >
                  –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                </button>
              </div>
            )}
          </div>
        </div>
      ) : (
        <div className={styles.bookingCompletedContainer}>
          <div className={styles.bookingSuccessCard}>
            <div className={styles.successIcon}>‚úì</div>
            <h2 className={styles.successTitle}>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</h2>
            
            <div className={styles.bookingDetails}>
              <div className={styles.bookingDetail}>
                <span className={styles.detailLabel}>–î–∞—Ç–∞:</span>
                <span className={styles.detailValue}>{formatDate(bookingDetails!.date)}</span>
              </div>
              <div className={styles.bookingDetail}>
                <span className={styles.detailLabel}>–í—Ä–µ–º—è:</span>
                <span className={styles.detailValue}>{bookingDetails!.time}</span>
              </div>
              <div className={styles.bookingDetail}>
                <span className={styles.detailLabel}>–¢–∞—Ä–∏—Ñ:</span>
                <span className={styles.detailValue}>{bookingDetails!.plan.title}</span>
              </div>
              <div className={styles.bookingDetail}>
                <span className={styles.detailLabel}>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                <span className={styles.detailValue}>{bookingDetails!.hours} —á.</span>
              </div>
              <div className={styles.bookingDetail}>
                <span className={styles.detailLabel}>–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                <span className={styles.detailValue}>{bookingDetails!.totalPrice} ‚ÇΩ</span>
              </div>
            </div>
            
            <h3 className={styles.productsTitle}>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –±–æ–∫—Å–∞?</h3>
            <p className={styles.productsDescription}>
              –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∞—Å –∂–¥–∞—Ç—å –≤ –±–æ–∫—Å–µ.
            </p>
            
            <div className={styles.actionButtons}>
              <button 
                className={styles.addProductsButton}
                onClick={goToProducts}
              >
                –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
              </button>
              
              <button 
                className={styles.skipButton}
                onClick={addBookingToCart}
              >
                –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CalendarPage; 