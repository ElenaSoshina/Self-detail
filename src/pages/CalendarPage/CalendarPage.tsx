import React, { useState, useEffect } from 'react';
import styles from './CalendarPage.module.css';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../../context/CartContex';
import { v4 as uuidv4 } from 'uuid';
import CalendarMonth from './CalendarMonth';
import TimeSlots from './TimeSlots';
import PlanSelection from './PlanSelection';
import BookingSuccess from './BookingSuccess';
import { useCalendarApi } from './useCalendarApi';
import { useBooking } from './useBooking';
import BookingModal from '../../components/BookingModal/BookingModal';
import {
  Day,
  PricingPlan,
  BookingDetails,
  TimeSlotWithData,
} from './calendarTypes';
import {
  generateDaysForMonth,
  isSameDay,
  formatDate,
} from './calendarUtils';
import { months, weekDays } from './calendarConstants';
import BookingSummary from './BookingSummary';
import api from '../../api/apiService';

interface CalendarPageProps {
  isAdmin?: boolean;
  selectedDate?: Date | null;
}

const CalendarPage: React.FC<CalendarPageProps> = ({ isAdmin, selectedDate: externalSelectedDate }) => {
  const navigate = useNavigate();
  const { addToCart } = useCart();

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî State ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  const [currentDate, setCurrentDate] = useState(new Date());
  const [days, setDays] = useState<Day[]>([]);
  const [selectedDate, setSelectedDate] = useState<Date | null>(externalSelectedDate ?? null);
  const [availableTimeSlots, setAvailableTimeSlots] = useState<string[]>([]);
  const [nextDayTimeSlots, setNextDayTimeSlots] = useState<string[]>([]);
  const [timeSlotData, setTimeSlotData] = useState<TimeSlotWithData[]>([]);
  const [nextDayTimeSlotData, setNextDayTimeSlotData] = useState<TimeSlotWithData[]>([]);
  const [startTime, setStartTime] = useState<string | null>(null);
  const [endTime, setEndTime] = useState<string | null>(null);
  const [bookingDetails, setBookingDetails] = useState<BookingDetails | null>(null);
  const [bookingCompleted, setBookingCompleted] = useState(false);
  const [loadingSlots, setLoadingSlots] = useState(true);
  const [slotsError, setSlotsError] = useState<string | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);
  const [showBookingModal, setShowBookingModal] = useState(false);
  const [forcedAvailableSlot, setForcedAvailableSlot] = useState<string | null>(null);

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Pricing ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  const pricingPlans: PricingPlan[] = [
    {
      id: 'wash',
      title: '–ú–æ–π–∫–∞ –∞–≤—Ç–æ',
      price: 800,
      icon: 'üí¶',
      description: '–ê–í–î, –ø–µ–Ω–æ–∫–æ–º–ø–ª–µ–∫—Ç—ã, –∞–≤—Ç–æ—à–∞–º–ø—É–Ω—å, –≤–æ—Å–∫, –≤–æ–¥—Å–≥–æ–Ω, –≥—É–±–∫–∏, —Ç—Ä—è–ø–∫–∏, –ø—ã–ª–µ—Å–æ—Å.'
    },
    {
      id: 'dry',
      title: '–°—É—Ö–æ–π –ø–æ—Å—Ç',
      price: 500,
      icon: 'üîå',
      description: '–†–æ–∑–µ—Ç–∫–∞ 220V –∏ –≤–æ–∑–¥—É—Ö –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤–æ–∏–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.'
    },
    {
      id: 'cleaning',
      title: '–•–∏–º—á–∏—Å—Ç–∫–∞',
      price: 800,
      icon: 'üßΩ',
      description: '–¢–æ—Ä–Ω–∞–¥–æ—Ä, –º–æ—é—â–∏–π –ø—ã–ª–µ—Å–æ—Å, —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ö–∏–º—á–∏—Å—Ç–∫–∏ —Ç–∫–∞–Ω–µ–≤—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –∏ –∫–æ–∂–∏.'
    },
    {
      id: 'polish',
      title: '–ü–æ–ª–∏—Ä–æ–≤–∫–∞',
      price: 800,
      icon: '‚ú®',
      description: '–ü–æ–ª–∏—Ä–æ–≤–æ—á–Ω–∞—è –º–∞—à–∏–Ω–∫–∞, –ø–æ–¥–ª–æ–∂–∫–∏, —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ö–∏–º. —á–∏—Å—Ç–∫–∏ –∫—É–∑–æ–≤–∞. –ü–∞—Å—Ç–∞ –∏ –∫—Ä—É–≥–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã.'
    },
    ...(isAdmin ? [{
      id: 'tech',
      title: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã',
      price: 0,
      icon: 'üõ†Ô∏è',
      description: '–°lot –¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏—Ö –∏–ª–∏ —Å–µ—Ä–≤–∏—Å–Ω—ã—Ö —Ä–∞–±–æ—Ç. –ù–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤.'
    }] : [])
  ];

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî API hooks ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  const { fetchAvailableTimeSlots } = useCalendarApi();
  const {
    selectedPlan,
    handlePlanClick,
  } = useBooking();

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Init ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  useEffect(() => {
    if (isInitialized) return;

    const init = async () => {
      const daysArray = generateDaysForMonth(currentDate.getFullYear(), currentDate.getMonth());
      setDays(daysArray);

      let initialDay: Day | undefined;
      if (externalSelectedDate) {
        initialDay = daysArray.find(d => d.date.toDateString() === externalSelectedDate.toDateString());
      } else {
        initialDay = daysArray.find(d => d.isToday && d.isAvailable);
      }
      setIsInitialized(true);

      if (!initialDay) {
        setLoadingSlots(false);
        return;
      }

      setSelectedDate(initialDay.date);
      setLoadingSlots(true);
      try {
        const { formattedTimeSlots, timeSlotsWithData } = await fetchAvailableTimeSlots(initialDay.date);
        setAvailableTimeSlots(formattedTimeSlots);
        setTimeSlotData(timeSlotsWithData);
      } catch {
        setSlotsError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤.');
      } finally {
        setLoadingSlots(false);
      }
    };

    init();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Load slots on date change ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  useEffect(() => {
    if (!selectedDate || !isInitialized) return;
    let cancelled = false;

    (async () => {
      setLoadingSlots(true);
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
        const { formattedTimeSlots, timeSlotsWithData } = await fetchAvailableTimeSlots(selectedDate);
        if (cancelled) return;
        setAvailableTimeSlots(formattedTimeSlots);
        setTimeSlotData(timeSlotsWithData);

        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
        const nextDay = new Date(selectedDate);
        nextDay.setDate(nextDay.getDate() + 1);
        const { formattedTimeSlots: nextDaySlots, timeSlotsWithData: nextDayData } = await fetchAvailableTimeSlots(nextDay);
        if (cancelled) return;

        // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å–ª–æ—Ç–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è (00:00, 01:00, 02:00, 03:00) –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        const firstFourHours = ['00:00', '01:00', '02:00', '03:00'];
        const firstFourData = firstFourHours.map(time => {
          // –ò—â–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –≤ –æ—Ç–≤–µ—Ç–µ API
          const existingData = nextDayData.find(slot => slot.formattedTime === time);
          if (existingData) {
            return existingData;
          }
          
          // –ï—Å–ª–∏ —Å–ª–æ—Ç–∞ –Ω–µ—Ç –≤ API –æ—Ç–≤–µ—Ç–µ, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π
          const nextDayDate = new Date(nextDay);
          const [hour] = time.split(':').map(Number);
          nextDayDate.setHours(hour, 0, 0, 0);
          
          return {
            formattedTime: time,
            originalData: null,
            sortKey: hour * 60,
            start: nextDayDate,
            end: new Date(nextDayDate.getTime() + 60 * 60 * 1000), // +1 —á–∞—Å
            available: false
          };
        });

        console.log('Next day slots:', firstFourHours); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        console.log('Next day data:', firstFourData); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        setNextDayTimeSlots(firstFourHours);
        setNextDayTimeSlotData(firstFourData);

        setStartTime(null);
        setEndTime(null);
        setBookingDetails(null);
        setBookingCompleted(false);
      } catch (error) {
        console.error('Error loading slots:', error); // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if (!cancelled) {
          setSlotsError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤.');
          setAvailableTimeSlots([]);
          setTimeSlotData([]);
          setNextDayTimeSlots([]);
          setNextDayTimeSlotData([]);
        }
      } finally {
        if (!cancelled) setLoadingSlots(false);
      }
    })();

    return () => { cancelled = true; };
  }, [selectedDate, isInitialized, fetchAvailableTimeSlots]);

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Month navigation ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  const goToPreviousMonth = () => {
    setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() - 1, 1));
    setSelectedDate(null);
  };

  const goToNextMonth = () => {
    setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() + 1, 1));
    setSelectedDate(null);
  };

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Date click ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  const handleDateClick = (day: Day) => {
    if (!day.isAvailable) return;
    setSelectedDate(day.date);    // –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –º–≥–Ω–æ–≤–µ–Ω–Ω–æ —á–µ—Ä–µ–∑ selectedDate
  };

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Time-slot click ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  const handleTimeSlotClick = (slot: string, isForced?: boolean) => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—ã–±–æ—Ä–∞
    if (slot === "reset") {
      setStartTime(null);
      setEndTime(null);
      setForcedAvailableSlot(null);
      return;
    }

    // –ï—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –∏–ª–∏ —Å–ª–æ—Ç –ø—Ä–æ—à–µ–¥—à–∏–π - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫
    if (loadingSlots) return;
    
    const past = isPastSlot(slot);
    if (past) return;

    // –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è - –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–¥–µ—Å—å
    if (nextDayTimeSlots.includes(slot)) {
      return;
    }

    // —Å–±—Ä–æ—Å, –µ—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –Ω–∞ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –Ω–∞—á–∞–ª–æ
    if (startTime === slot) {
      setStartTime(null);
      setEndTime(null);
      setForcedAvailableSlot(null);
      return;
    }

    // –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∞—á–∞–ª–∞ –∏–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω —É–∂–µ –∑–∞–∫–æ–Ω—á–µ–Ω ‚áí –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π –≤—ã–±–æ—Ä
    if (!startTime || endTime) {
      setStartTime(slot);
      setEndTime(null);
      return;
    }

    // –≤—Ç–æ—Ä–æ–π –∫–ª–∏–∫ ‚Äì –ø—ã—Ç–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω–µ—Ü
    const startIdx = allDaySlots.findIndex(s => s.formattedTime === startTime);
    const endIdx = allDaySlots.findIndex(s => s.formattedTime === slot);
    if (endIdx <= startIdx) return;                        // –Ω–∞–∑–∞–¥ –Ω–µ–ª—å–∑—è

    // —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–µ—Å—å –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –º–µ–∂–¥—É –≥—Ä–∞–Ω–∏—Ü–∞–º–∏ —Å–≤–æ–±–æ–¥–µ–Ω
    let allSlotsAvailable = true;
    for (let i = startIdx + 1; i < endIdx; i++) {
      const currentSlot = allDaySlots[i].formattedTime;
      if (!availableTimeSlots.includes(currentSlot)) {
        allSlotsAvailable = false;
        break;
      }
    }

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–µ—Ü —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã
    // –∏–ª–∏ –µ—Å–ª–∏ —Å–ª–æ—Ç —Å–ª–µ–¥—É–µ—Ç —Å—Ä–∞–∑—É –∑–∞ –Ω–∞—á–∞–ª—å–Ω—ã–º
    if (allSlotsAvailable || endIdx === startIdx + 1) {
      setEndTime(slot);
      setForcedAvailableSlot(null);
    }
  };
  
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ—Ç –ø—Ä–æ—à–µ–¥—à–∏–º
  const isPastSlot = (slotTime: string): boolean => {
    if (!selectedDate) return false;
    
    const now = new Date();
    const isToday = selectedDate.toDateString() === now.toDateString();
    if (!isToday) return false;
    
    const [slotHour, slotMinute] = slotTime.split(":").map(Number);
    const slotDate = new Date(selectedDate);
    slotDate.setHours(slotHour, slotMinute, 0, 0);
    
    const buffer = 5 * 60 * 1000; // 5 –º–∏–Ω—É—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    return slotDate.getTime() <= (now.getTime() + buffer);
  };

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî All 24h slots (local) ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  const allDaySlots = Array.from({ length: 24 }, (_, h) => {
    const start = `${h.toString().padStart(2, '0')}:00`;
    const end = `${((h + 1) % 24).toString().padStart(2, '0')}:00`;
    return { formattedTime: start, start, end };
  });

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Helpers ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —Å–ª–æ—Ç –≤ —Ç–µ–∫—É—â–µ–º –¥–Ω–µ (–≤–∫–ª—é—á–∞—è –≥—Ä–∞–Ω–∏—á–Ω—ã–µ)
  const isSlotAvailableInCurrentDay = (slotTime: string): boolean => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ—Ç –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è
    if (availableTimeSlots.includes(slotTime)) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–æ—Ç –≥—Ä–∞–Ω–∏—á–Ω—ã–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–±—Ä–∞–Ω –∫–∞–∫ –∫–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞)
    const slotIndex = allDaySlots.findIndex(s => s.formattedTime === slotTime);
    if (slotIndex === -1) return false;
    
    // –°–ª–æ—Ç —è–≤–ª—è–µ—Ç—Å—è –≥—Ä–∞–Ω–∏—á–Ω—ã–º, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å–ª–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω, –∞ —Ç–µ–∫—É—â–∏–π - –Ω–µ—Ç
    if (slotIndex > 0) {
      const prevSlot = allDaySlots[slotIndex - 1].formattedTime;
      return availableTimeSlots.includes(prevSlot) && !availableTimeSlots.includes(slotTime);
    }
    
    return false;
  };

  const getDuration = () => {
    if (!startTime || !endTime || !selectedDate) return null;
    
    const [startHour, startMinute] = startTime.split(':').map(Number);
    const [endHour, endMinute] = endTime.split(':').map(Number);

    let startDate = new Date(selectedDate);
    let endDate = new Date(selectedDate);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º –¥–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è startTime –∏ endTime
    // –°–ª–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ nextDayTimeSlots
    const startTimeInNextDay = nextDayTimeSlots.includes(startTime);
    const endTimeInNextDay = nextDayTimeSlots.includes(endTime);
    
    // –ï—Å–ª–∏ startTime –≤ —Å–ª–µ–¥—É—é—â–µ–º –¥–Ω–µ
    if (startTimeInNextDay) {
      startDate.setDate(startDate.getDate() + 1);
    }
    
    // –ï—Å–ª–∏ endTime –≤ —Å–ª–µ–¥—É—é—â–µ–º –¥–Ω–µ
    if (endTimeInNextDay) {
      endDate.setDate(endDate.getDate() + 1);
    }
    
    startDate.setHours(startHour, startMinute, 0, 0);
    endDate.setHours(endHour, endMinute, 0, 0);

    const durationMs = endDate.getTime() - startDate.getTime();
    const durationHours = durationMs / 3_600_000;
    
    console.log('Duration calculation:', {
      startTime,
      endTime,
      startTimeInNextDay,
      endTimeInNextDay,
      startDate: startDate.toISOString(),
      endDate: endDate.toISOString(),
      durationMs,
      durationHours
    });

    return durationHours;
  };

  const getDateRange = () => {
    if (!startTime || !endTime || !selectedDate) return '-';
    
    let startDate = new Date(selectedDate);
    let endDate = new Date(selectedDate);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–º –¥–Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è startTime –∏ endTime
    // –°–ª–æ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–ª–µ–¥—É—é—â–µ–º—É –¥–Ω—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å –≤ nextDayTimeSlots
    const startTimeInNextDay = nextDayTimeSlots.includes(startTime);
    const endTimeInNextDay = nextDayTimeSlots.includes(endTime);
    
    // –ï—Å–ª–∏ startTime –≤ —Å–ª–µ–¥—É—é—â–µ–º –¥–Ω–µ
    if (startTimeInNextDay) {
      startDate.setDate(startDate.getDate() + 1);
    }
    
    // –ï—Å–ª–∏ endTime –≤ —Å–ª–µ–¥—É—é—â–µ–º –¥–Ω–µ
    if (endTimeInNextDay) {
      endDate.setDate(endDate.getDate() + 1);
    }
    
    // –ï—Å–ª–∏ –¥–∞—Ç—ã —Ä–∞–∑–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
    if (startDate.toDateString() !== endDate.toDateString()) {
      return `${formatDate(startDate)} ‚Äî ${formatDate(endDate)}`;
    }
    
    return formatDate(startDate);
  };

  const duration = getDuration();

  const timeRange = duration !== null
    ? `${startTime} ‚Äî ${endTime}`
    : '';

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Booking handlers ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  const onBook = () => {
    if (!selectedDate || !duration || !selectedPlan || !startTime || !endTime) return;
    const totalPrice = selectedPlan.price * duration;
    
    // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏
    if (isAdmin && selectedPlan.id === 'tech') {
      setBookingDetails({
        date: selectedDate,
        timeRange,
        duration,
        plan: selectedPlan,
        totalPrice,
      });
      setShowBookingModal(true);
    } else {
      // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ç–æ–∫
      setBookingDetails({
        date: selectedDate,
        timeRange,
        duration,
        plan: selectedPlan,
        totalPrice,
      });
      setBookingCompleted(true);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const handleBookingComplete = (formData: any) => {
    console.log('–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ:', formData);
    setShowBookingModal(false);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    setStartTime(null);
    setEndTime(null);
    
    // –ï—Å–ª–∏ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
    if (isAdmin) {
      setTimeout(() => {
        window.location.reload();
      }, 1000);
    }
  };

  const addBookingToCart = () => {
    if (!bookingDetails) return;
    const formattedDate = formatDate(bookingDetails.date);
    addToCart({
      id: uuidv4(),
      name: `${bookingDetails.plan.title} (${formattedDate}, ${bookingDetails.timeRange})`,
      price: bookingDetails.totalPrice,
      type: 'booking',
      region: '',
      details: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${bookingDetails.duration.toFixed(2)} —á. | ${bookingDetails.timeRange}`,
    });
    navigate('/');
  };

  const goToProducts = () => {
    addBookingToCart();
    navigate('/products');
  };

  /** ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî Render ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî */
  const currentMonthYear = `${months[currentDate.getMonth()]} ${currentDate.getFullYear()}`;

  const handleRangeSelect = (start: string | null, end: string | null) => {
    console.log('=== handleRangeSelect called ===');
    console.log('Previous state:', { startTime, endTime });
    console.log('New values:', { start, end });
    setStartTime(start);
    setEndTime(end);
    console.log('State should be updated to:', { startTime: start, endTime: end });
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–µ—Ç–∫–∏ –¥–Ω–µ–π –ø—Ä–∏ —Å–º–µ–Ω–µ –º–µ—Å—è—Ü–∞
  useEffect(() => {
    const daysArray = generateDaysForMonth(currentDate.getFullYear(), currentDate.getMonth());
    setDays(daysArray);
  }, [currentDate]);

  return (
    <div className={isAdmin ? `${styles.calendarContainer} ${styles.admin}` : styles.calendarContainer}>
      {/* ‚Äî‚Äî‚Äî header ‚Äî‚Äî‚Äî */}
      {!bookingCompleted && (
        <div className={styles.calendarHeader}>
          <h1 className={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</h1>
          {!isAdmin && (
            <button className={styles.backButton} onClick={() => navigate('/')}>–ù–∞–∑–∞–¥</button>
          )}
        </div>
      )}

      {/* ‚Äî‚Äî‚Äî main content ‚Äî‚Äî‚Äî */}
      {!bookingCompleted ? (
        <div className={styles.calendarContent}>
          {/* ‚Äî‚Äî‚Äî calendar ‚Äî‚Äî‚Äî */}
          <div className={styles.calendar}>
            <div className={styles.calendarNav}>
              <button className={styles.navButton} onClick={goToPreviousMonth}>&#10094;</button>
              <h2 className={styles.currentMonth}>{currentMonthYear}</h2>
              <button className={styles.navButton} onClick={goToNextMonth}>&#10095;</button>
            </div>
            <div className={styles.weekdays}>
              {weekDays.map(day => <div key={day} className={styles.weekday}>{day}</div>)}
            </div>
            <CalendarMonth
              days={days}
              selectedDate={selectedDate}
              onDateClick={handleDateClick}
              isSameDay={isSameDay}
            />
          </div>

          {/* ‚Äî‚Äî‚Äî booking panel ‚Äî‚Äî‚Äî */}
          <div className={styles.bookingSelection}>
            <TimeSlots
              selectedDate={selectedDate}
              loadingSlots={loadingSlots}
              slotsError={slotsError}
              allDaySlots={allDaySlots}
              availableTimeSlots={availableTimeSlots}
              nextDayTimeSlots={nextDayTimeSlots}
              formatDate={formatDate}
              timeSlotData={timeSlotData}
              nextDayTimeSlotData={nextDayTimeSlotData}
              onRangeSelect={handleRangeSelect}
              startTime={startTime}
              endTime={endTime}
            />

            {duration && (
              <>
                <PlanSelection
                  pricingPlans={pricingPlans}
                  selectedPlan={selectedPlan}
                  onPlanClick={handlePlanClick}
                />
                {selectedPlan && (
                  <BookingSummary
                    startTime={startTime}
                    endTime={endTime}
                    duration={duration}
                    selectedPlan={selectedPlan}
                    onBook={onBook}
                    formatDate={formatDate}
                    getDateRange={getDateRange}
                  />
                )}
              </>
            )}
          </div>
        </div>
      ) : (
        bookingDetails && (
          <BookingSuccess
            bookingDetails={bookingDetails}
            formatDate={formatDate}
            getDateRange={getDateRange}
            goToProducts={goToProducts}
            addBookingToCart={addBookingToCart}
            onBack={() => setBookingCompleted(false)}
          />
        )
      )}
      
      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç —Å –ø—Ä–µ–¥–∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–º–∏ –ø–æ–ª—è–º–∏ */}
      {showBookingModal && bookingDetails && (
        <BookingModal
          isOpen={showBookingModal}
          onClose={() => setShowBookingModal(false)}
          startTime={startTime || ''}
          endTime={endTime || ''}
          service={{
            serviceName: '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã',
            price: 0
          }}
          onSubmit={handleBookingComplete}
          selectedDate={selectedDate}
          isAdmin={true}
          prefilledData={{
            name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
            phone: '+79999999999',
            email: 'admin@admin.com',
            telegramUserName: '@admin'
          }}
        />
      )}
    </div>
  );
};

export default CalendarPage;