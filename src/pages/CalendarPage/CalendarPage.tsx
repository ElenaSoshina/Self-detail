import React, { useState, useEffect } from 'react';
import styles from './CalendarPage.module.css';
import { useNavigate } from 'react-router-dom';
import { useCart } from '../../context/CartContex';
import { v4 as uuidv4 } from 'uuid'; // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID
import axios from 'axios';

interface Day {
  date: Date;
  isCurrentMonth: boolean;
  isToday: boolean;
  isAvailable: boolean;
}

interface PricingPlan {
  id: string;
  title: string;
  price: number;
  icon: string;
  description: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
interface BookingDetails {
  id: string;
  date: Date;
  time: string;
  plan: PricingPlan;
  hours: number;
  totalPrice: number;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å–ª–æ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏ —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
interface TimeSlotWithData {
  formattedTime: string;
  originalData: any;
  sortKey: number;
  start: Date;  // –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ª–æ—Ç–∞
  end: Date;    // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–æ—Ç–∞
}

// –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏
interface AvailabilityData {
  timeSlots: string[];              // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  originalData: TimeSlotWithData[]; // –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
  maxAvailableHours: number;        // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª-–≤–æ —á–∞—Å–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
}

const CalendarPage: React.FC = () => {
  const navigate = useNavigate();
  const { addToCart } = useCart();
  const [currentDate, setCurrentDate] = useState(new Date());
  const [days, setDays] = useState<Day[]>([]);
  const [selectedDate, setSelectedDate] = useState<Date | null>(null);
  const [availableTimeSlots, setAvailableTimeSlots] = useState<string[]>([]);
  const [timeSlotData, setTimeSlotData] = useState<TimeSlotWithData[]>([]);
  const [selectedTime, setSelectedTime] = useState<string | null>(null);
  const [maxAvailableHours, setMaxAvailableHours] = useState<number>(8); // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –≤–æ–∑–º–æ–∂–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  const [selectedPlan, setSelectedPlan] = useState<PricingPlan | null>(null);
  const [hours, setHours] = useState<number>(1);
  const [bookingDetails, setBookingDetails] = useState<BookingDetails | null>(null);
  const [bookingCompleted, setBookingCompleted] = useState(false);
  const [loadingSlots, setLoadingSlots] = useState(true); // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
  const [slotsError, setSlotsError] = useState<string | null>(null);
  const [isInitialized, setIsInitialized] = useState(false);

  // –î–∞–Ω–Ω—ã–µ –æ —Ç–∞—Ä–∏—Ñ–∞—Ö
  const pricingPlans: PricingPlan[] = [
    {
      id: 'wash',
      title: '–ú–æ–π–∫–∞ –∞–≤—Ç–æ',
      price: 800,
      icon: 'üí¶',
      description: '–ê–í–î, –ø–µ–Ω–æ–∫–æ–º–ø–ª–µ–∫—Ç—ã, –∞–≤—Ç–æ—à–∞–º–ø—É–Ω—å, –≤–æ—Å–∫, –≤–æ–¥—Å–≥–æ–Ω, –≥—É–±–∫–∏, —Ç—Ä—è–ø–∫–∏, –ø—ã–ª–µ—Å–æ—Å.'
    },
    {
      id: 'dry',
      title: '–°—É—Ö–æ–π –ø–æ—Å—Ç',
      price: 500,
      icon: 'üîå',
      description: '–†–æ–∑–µ—Ç–∫–∞ 220V –∏ –≤–æ–∑–¥—É—Ö –ø–æ–¥ –¥–∞–≤–ª–µ–Ω–∏–µ–º. –î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–≤–æ–∏–º–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞–º–∏ –∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º.'
    },
    {
      id: 'cleaning',
      title: '–•–∏–º—á–∏—Å—Ç–∫–∞',
      price: 800,
      icon: 'üßΩ',
      description: '–¢–æ—Ä–Ω–∞–¥–æ—Ä, –º–æ—é—â–∏–π –ø—ã–ª–µ—Å–æ—Å, —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ö–∏–º—á–∏—Å—Ç–∫–∏ —Ç–∫–∞–Ω–µ–≤—ã—Ö –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π –∏ –∫–æ–∂–∏.'
    },
    {
      id: 'polish',
      title: '–ü–æ–ª–∏—Ä–æ–≤–∫–∞',
      price: 800,
      icon: '‚ú®',
      description: '–ü–æ–ª–∏—Ä–æ–≤–æ—á–Ω–∞—è –º–∞—à–∏–Ω–∫–∞, –ø–æ–¥–ª–æ–∂–∫–∏, —Å—Ä–µ–¥—Å—Ç–≤–∞ –¥–ª—è —Ö–∏–º. —á–∏—Å—Ç–∫–∏ –∫—É–∑–æ–≤–∞. –ü–∞—Å—Ç–∞ –∏ –∫—Ä—É–≥–∏ –Ω–µ –≤–∫–ª—é—á–µ–Ω—ã.'
    }
  ];

  // –ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –º–µ—Å—è—Ü–µ–≤
  const months = [
    '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
    '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
  ];

  // –ú–∞—Å—Å–∏–≤ –Ω–∞–∑–≤–∞–Ω–∏–π –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏
  const weekDays = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'];

  // –ó–∞–ø—Ä–æ—Å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞
  const fetchAvailableTimeSlots = async (date: Date) => {
    try {
      console.log('–ó–∞–ø—Ä–æ—Å —Å–ª–æ—Ç–æ–≤ –¥–ª—è –¥–∞—Ç—ã:', date);
      setLoadingSlots(true);
      setSlotsError(null);
      
      // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã (—Å—É—Ç–∫–∏)
      const startDate = new Date(date);
      startDate.setHours(0, 0, 0, 0);
      
      const endDate = new Date(date);
      endDate.setHours(23, 59, 59, 999);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
      const startDateISO = startDate.toISOString();
      const endDateISO = endDate.toISOString();
      
      // –í—ã–≤–æ–¥–∏–º URL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      const apiUrl = 'https://backend.self-detailing.duckdns.org/api/v1/calendar/available';
      console.log('URL –∑–∞–ø—Ä–æ—Å–∞:', apiUrl);
      console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', { start: startDateISO, end: endDateISO });

      // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º axios
      const response = await axios.get(
        apiUrl, 
        {
          params: {
            start: startDateISO,
            end: endDateISO
          },
          headers: {
            'Accept': 'application/json',
            'Content-Type': 'application/json'
          },
          timeout: 10000, // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
        }
      );
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –æ—Ç–≤–µ—Ç–∞
      console.log('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
      console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:', response.data);
      
      const data = response.data;
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const timeSlotsWithData: TimeSlotWithData[] = data.map((slot: any) => {
        const slotTime = new Date(slot.start);
        const hours = slotTime.getHours();
        const minutes = slotTime.getMinutes();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—Ç–∞
        const duration = slot.duration || 60; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
        return {
          formattedTime: `${hours < 10 ? '0' + hours : hours}:${minutes === 0 ? '00' : minutes < 10 ? '0' + minutes : minutes}`,
          originalData: slot,
          sortKey: hours * 60 + minutes, // –ö–ª—é—á –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–º–∏–Ω—É—Ç—ã –æ—Ç –Ω–∞—á–∞–ª–∞ –¥–Ω—è)
          start: slotTime,
          end: new Date(slotTime.getTime() + duration * 60000) // –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Å–ª–æ—Ç–∞
        };
      });
      
      // –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–ª–æ—Ç–∞—Ö –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      console.log('–î–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–æ–π:', timeSlotsWithData);
      
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
      timeSlotsWithData.sort((a: TimeSlotWithData, b: TimeSlotWithData) => a.sortKey - b.sortKey);
      
      console.log('–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç–æ–≤:', timeSlotsWithData);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
      const formattedTimeSlots = timeSlotsWithData.map((slot: TimeSlotWithData) => slot.formattedTime);
      
      console.log('–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', formattedTimeSlots);
      
      setAvailableTimeSlots(formattedTimeSlots);
      setTimeSlotData(timeSlotsWithData);
      setLoadingSlots(false);
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è, –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
      if (selectedTime) {
        const maxHours = calculateMaxAvailableHours(selectedTime, timeSlotsWithData);
        setMaxAvailableHours(maxHours);
        
        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤, –µ—Å–ª–∏ –æ–Ω–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º
        if (hours > maxHours) {
          setHours(maxHours);
        }
      }
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤:', error);
      
      // –í—ã–≤–æ–¥–∏–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
      if (axios.isAxiosError(error)) {
        console.log('–û—à–∏–±–∫–∞ Axios:', {
          message: error.message,
          status: error.response?.status,
          statusText: error.response?.statusText,
          data: error.response?.data,
          config: {
            url: error.config?.url,
            method: error.config?.method,
            params: error.config?.params,
            headers: error.config?.headers,
            timeout: error.config?.timeout,
          }
        });
        
        if (error.response) {
          // –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ —Å –æ—à–∏–±–∫–æ–π
          setSlotsError(`–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: ${error.response.status} ${error.response.statusText}. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.`);
        } else if (error.request) {
          // –ó–∞–ø—Ä–æ—Å –±—ã–ª —Å–¥–µ–ª–∞–Ω, –Ω–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω
          setSlotsError(`–°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –í–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∏–ª–∏ CORS.`);
        } else {
          // –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ –∑–∞–ø—Ä–æ—Å–∞
          setSlotsError(`–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: ${error.message}`);
        }
      } else {
        // –û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω–∞—è —Å Axios
        setSlotsError(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${error.message}`);
      }
      
      setAvailableTimeSlots([]);
      setTimeSlotData([]);
      setLoadingSlots(false);
    }
  };

  // –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ - –≤—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
  useEffect(() => {
    console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω, –≤—ã–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å');
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–Ω–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const daysArray = generateDaysForMonth(
      currentDate.getFullYear(),
      currentDate.getMonth()
    );
    setDays(daysArray);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –∏ –≤—ã–±–∏—Ä–∞–µ–º –µ–≥–æ, –µ—Å–ª–∏ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω
    const today = new Date();
    today.setHours(0, 0, 0, 0); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    
    console.log('–ü–æ–∏—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è –≤ –º–∞—Å—Å–∏–≤–µ –¥–Ω–µ–π...');
    const todayDay = daysArray.find(day => 
      day.isToday && day.isAvailable
    );
    
    if (todayDay) {
      console.log('–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–∞–π–¥–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω:', todayDay.date);
      setSelectedDate(todayDay.date);
      
      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–ª–æ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => {
        console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è');
        try {
          // –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–ª–Ω–æ—á—å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –∏ 23:59:59 —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
          const todayStart = new Date(today);
          todayStart.setHours(0, 0, 0, 0);
          
          const todayEnd = new Date(today);
          todayEnd.setHours(23, 59, 59, 999);
          
          // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≤ ISO —Ñ–æ—Ä–º–∞—Ç–µ
          const startDateISO = todayStart.toISOString();
          const endDateISO = todayEnd.toISOString();
          
          console.log('–ü—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –∫ API –¥–ª—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã:', {
            —Å–µ–≥–æ–¥–Ω—è: today,
            –Ω–∞—á–∞–ª–æ: startDateISO,
            –∫–æ–Ω–µ—Ü: endDateISO
          });
          
          // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é
          axios.get(
            'https://backend.self-detailing.duckdns.org/api/v1/calendar/available',
            {
              params: {
                start: startDateISO,
                end: endDateISO
              },
              headers: {
                'Accept': 'application/json',
                'Content-Type': 'application/json'
              },
              timeout: 10000
            }
          )
          .then(response => {
            console.log('–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è:', response.data);
            console.log('–î–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ —Å–ª–æ—Ç–æ–≤:', response.data.length);
            
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
            const data = response.data;
            const timeSlotsWithData: TimeSlotWithData[] = data.map((slot: any) => {
              const slotTime = new Date(slot.start);
              const hours = slotTime.getHours();
              const minutes = slotTime.getMinutes();
              return {
                formattedTime: `${hours < 10 ? '0' + hours : hours}:${minutes === 0 ? '00' : minutes < 10 ? '0' + minutes : minutes}`,
                originalData: slot,
                sortKey: hours * 60 + minutes,
                start: slotTime,
                end: new Date(slotTime.getTime() + slot.duration * 60000)
              };
            });
            
            timeSlotsWithData.sort((a: TimeSlotWithData, b: TimeSlotWithData) => a.sortKey - b.sortKey);
            const formattedTimeSlots = timeSlotsWithData.map((slot: TimeSlotWithData) => slot.formattedTime);
            
            console.log('–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã:', formattedTimeSlots);
            setAvailableTimeSlots(formattedTimeSlots);
            setTimeSlotData(timeSlotsWithData);
          })
          .catch(error => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Å–µ–≥–æ–¥–Ω—è:', error);
            if (axios.isAxiosError(error)) {
              console.log('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ Axios:', {
                —Å–æ–æ–±—â–µ–Ω–∏–µ: error.message,
                —Å—Ç–∞—Ç—É—Å: error.response?.status,
                –¥–∞–Ω–Ω—ã–µ: error.response?.data,
                –ø–∞—Ä–∞–º–µ—Ç—Ä—ã: error.config?.params,
                URL: error.config?.url
              });
            }
            setSlotsError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–æ—Ç–æ–≤. –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏.');
            setAvailableTimeSlots([]);
            setTimeSlotData([]);
          });
        } catch (e) {
          console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ:', e);
          setLoadingSlots(false);
        }
      }, 500);
    } else {
      console.log('–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      setLoadingSlots(false);
    }
  }, []); // –ü—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π - —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  
  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
  useEffect(() => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä, —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    if (days.length > 0) {
      console.log('–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞:', currentDate);
      const daysArray = generateDaysForMonth(
        currentDate.getFullYear(),
        currentDate.getMonth()
      );
      setDays(daysArray);
    }
  }, [currentDate, days.length]);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø—Ä–∏ —è–≤–Ω–æ–º –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã (–Ω–µ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
  useEffect(() => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä
    if (selectedDate && days.length > 0) {
      console.log('–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é:', selectedDate);
      fetchAvailableTimeSlots(selectedDate);
      
      setSelectedTime(null);
      setSelectedPlan(null);
      setBookingDetails(null);
      setBookingCompleted(false);
    }
  }, [selectedDate]);

  // –°–±—Ä–æ—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
  useEffect(() => {
    setSelectedPlan(null);
    setBookingDetails(null);
    setBookingCompleted(false);
  }, [selectedTime]);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
  const generateDaysForMonth = (year: number, month: number): Day[] => {
    const result: Day[] = [];
    const firstDayOfMonth = new Date(year, month, 1);
    const lastDayOfMonth = new Date(year, month + 1, 0);
    
    // –ù–∞—Ö–æ–¥–∏–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –º–µ—Å—è—Ü–∞ (0 - –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ, 1 - –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
    let firstDayWeekday = firstDayOfMonth.getDay() || 7;
    firstDayWeekday = firstDayWeekday === 0 ? 7 : firstDayWeekday; // –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –∏–∑ 0 –≤ 7
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const daysFromPrevMonth = firstDayWeekday - 1;
    const prevMonth = new Date(year, month, 0);
    for (let i = prevMonth.getDate() - daysFromPrevMonth + 1; i <= prevMonth.getDate(); i++) {
      const date = new Date(year, month - 1, i);
      result.push({
        date,
        isCurrentMonth: false,
        isToday: isSameDay(date, new Date()),
        isAvailable: false // –¥–Ω–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    const today = new Date();
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –¥–∞—Ç
    today.setHours(0, 0, 0, 0);
    
    for (let i = 1; i <= lastDayOfMonth.getDate(); i++) {
      const date = new Date(year, month, i);
      // –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è
      date.setHours(0, 0, 0, 0);
      
      // –°—á–∏—Ç–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –∏ –≤—Å–µ –±—É–¥—É—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
      const isDateAvailable = date >= today;
      
      // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (isSameDay(date, today)) {
        console.log('–¢–µ–∫—É—â–∏–π –¥–µ–Ω—å –¥–æ—Å—Ç—É–ø–µ–Ω:', isDateAvailable);
      }
      
      result.push({
        date,
        isCurrentMonth: true,
        isToday: isSameDay(date, today),
        isAvailable: isDateAvailable
      });
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞, —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å —Å–µ—Ç–∫—É (–¥–æ 42 –¥–Ω–µ–π - 6 –Ω–µ–¥–µ–ª—å)
    const remainingDays = 42 - result.length;
    for (let i = 1; i <= remainingDays; i++) {
      const date = new Date(year, month + 1, i);
      result.push({
        date,
        isCurrentMonth: false,
        isToday: isSameDay(date, new Date()),
        isAvailable: true // –¥–Ω–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –¥–æ—Å—Ç—É–ø–Ω—ã
      });
    }
    
    return result;
  };

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –¥–µ–Ω—å
  const isSameDay = (date1: Date, date2: Date) => {
    return (
      date1.getDate() === date2.getDate() &&
      date1.getMonth() === date2.getMonth() &&
      date1.getFullYear() === date2.getFullYear()
    );
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü
  const goToPreviousMonth = () => {
    setCurrentDate(prevDate => {
      const newDate = new Date(prevDate);
      newDate.setMonth(prevDate.getMonth() - 1);
      return newDate;
    });
    setSelectedDate(null);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü
  const goToNextMonth = () => {
    setCurrentDate(prevDate => {
      const newDate = new Date(prevDate);
      newDate.setMonth(prevDate.getMonth() + 1);
      return newDate;
    });
    setSelectedDate(null);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
  const handleDateClick = (day: Day) => {
    if (day.isAvailable) {
      // –ü–µ—á–∞—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç–µ
      console.log('–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:', day.date);
      console.log('–≠—Ç–æ —Å–µ–≥–æ–¥–Ω—è:', day.isToday);
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
      setSelectedDate(day.date);
      
      // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–µ–µ
      if (day.isToday) {
        console.log('–í—ã–±—Ä–∞–Ω —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å, –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–µ–≥–æ–¥–Ω—è');
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É
        const today = new Date();
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ (–≤–µ—Å—å –¥–µ–Ω—å)
        const todayStart = new Date(today);
        todayStart.setHours(0, 0, 0, 0);
        
        const todayEnd = new Date(today);
        todayEnd.setHours(23, 59, 59, 999);
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const startDateISO = todayStart.toISOString();
        const endDateISO = todayEnd.toISOString();
        
        console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–ª–æ—Ç—ã –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è:', {
          –Ω–∞—á–∞–ª–æ: startDateISO,
          –∫–æ–Ω–µ—Ü: endDateISO
        });
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        setLoadingSlots(true);
        setSlotsError(null);
        
        // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        axios.get(
          'https://backend.self-detailing.duckdns.org/api/v1/calendar/available',
          {
            params: {
              start: startDateISO,
              end: endDateISO
            },
            headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json'
            },
            timeout: 10000
          }
        )
        .then(response => {
          console.log('–ü–æ–ª—É—á–µ–Ω—ã —Å–ª–æ—Ç—ã –¥–ª—è —Å–µ–≥–æ–¥–Ω—è:', response.data);
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ª–æ—Ç—ã
          const data = response.data;
          if (data && Array.isArray(data)) {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            const timeSlotsWithData: TimeSlotWithData[] = data.map((slot: any) => {
              const slotTime = new Date(slot.start);
              const hours = slotTime.getHours();
              const minutes = slotTime.getMinutes();
              return {
                formattedTime: `${hours < 10 ? '0' + hours : hours}:${minutes === 0 ? '00' : minutes < 10 ? '0' + minutes : minutes}`,
                originalData: slot,
                sortKey: hours * 60 + minutes,
                start: slotTime,
                end: new Date(slotTime.getTime() + slot.duration * 60000)
              };
            });
            
            timeSlotsWithData.sort((a: TimeSlotWithData, b: TimeSlotWithData) => a.sortKey - b.sortKey);
            const formattedTimeSlots = timeSlotsWithData.map((slot: TimeSlotWithData) => slot.formattedTime);
            
            console.log('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', formattedTimeSlots);
            setAvailableTimeSlots(formattedTimeSlots);
            setTimeSlotData(timeSlotsWithData);
          } else {
            console.error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', data);
            setAvailableTimeSlots([]);
            setTimeSlotData([]);
          }
          
          setLoadingSlots(false);
        })
        .catch(error => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è:', error);
          setSlotsError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ª–æ—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –¥–Ω—è');
          setAvailableTimeSlots([]);
          setTimeSlotData([]);
          setLoadingSlots(false);
        });
      }
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
  const handleTimeSlotClick = (timeSlot: string) => {
    setSelectedTime(timeSlot);
    
    // –í—ã—á–∏—Å–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    const maxHours = calculateMaxAvailableHours(timeSlot, timeSlotData);
    setMaxAvailableHours(maxHours);
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å–æ–≤ –Ω–∞ 1, –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º—É–º
    if (hours > maxHours) {
      setHours(1);
    }
    
    console.log(`–î–ª—è —Å–ª–æ—Ç–∞ ${timeSlot} –¥–æ—Å—Ç—É–ø–Ω–æ –º–∞–∫—Å–∏–º—É–º ${maxHours} —á.`);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞
  const handlePlanClick = (plan: PricingPlan) => {
    setSelectedPlan(plan);
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤
  const handleHoursChange = (newHours: number) => {
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –æ—Ç 1 –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤
    setHours(Math.max(1, Math.min(newHours, maxAvailableHours)));
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const handleBooking = () => {
    if (selectedDate && selectedTime && selectedPlan) {
      const booking: BookingDetails = {
        id: uuidv4(), // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
        date: selectedDate,
        time: selectedTime,
        plan: selectedPlan,
        hours: hours,
        totalPrice: selectedPlan.price * hours
      };
      
      setBookingDetails(booking);
      setBookingCompleted(true);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ—Ä–∑–∏–Ω—É
  const addBookingToCart = () => {
    if (bookingDetails) {
      const formattedDate = formatDate(bookingDetails.date);
      const bookingItem = {
        id: bookingDetails.id,
        name: `${bookingDetails.plan.title} (${formattedDate}, ${bookingDetails.time})`,
        price: bookingDetails.totalPrice, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—Å–µ —á–∞—Å—ã
        type: 'booking',
        region: '',
        details: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${bookingDetails.hours} —á. | ${bookingDetails.time}`,
        icon: bookingDetails.plan.icon, // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–∞—Ä–∏—Ñ–∞
      };

      addToCart(bookingItem);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
      navigate('/');
    }
  };

  // –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ —Å –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const goToProducts = () => {
    if (bookingDetails) {
      const formattedDate = formatDate(bookingDetails.date);
      const bookingItem = {
        id: bookingDetails.id,
        name: `${bookingDetails.plan.title} (${formattedDate}, ${bookingDetails.time})`,
        price: bookingDetails.totalPrice, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ –≤—Å–µ —á–∞—Å—ã
        type: 'booking',
        region: '',
        details: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ ${bookingDetails.hours} —á. | ${bookingDetails.time}`,
        icon: bookingDetails.plan.icon, // –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Ç–∞—Ä–∏—Ñ–∞
      };

      addToCart(bookingItem);
      
      // –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–æ–≤
      navigate('/products');
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
  const formatDate = (date: Date): string => {
    return date.toLocaleDateString('ru-RU', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    });
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
  const currentMonthYear = `${months[currentDate.getMonth()]} ${currentDate.getFullYear()}`;

  // –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏
  const calculateTotalPrice = () => {
    if (!selectedPlan) return 0;
    return selectedPlan.price * hours;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—Ä–æ–Ω–∏
  const calculateMaxAvailableHours = (selectedTimeStr: string, slots: TimeSlotWithData[]): number => {
    console.log('–í—ã—á–∏—Å–ª–µ–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è', selectedTimeStr);
    console.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã:', slots.map(s => s.formattedTime));
    
    // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞
    const selectedIndex = slots.findIndex(slot => slot.formattedTime === selectedTimeStr);
    
    if (selectedIndex === -1) {
      console.log('–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Å–∏–≤–µ');
      return 1; // –ï—Å–ª–∏ —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
    }
    
    const selectedSlot = slots[selectedIndex];
    const selectedStartTime = new Date(selectedSlot.start);
    
    console.log('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ—Ç–∞:', selectedStartTime);
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –∏–¥—É—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    let availableHours = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å 1 —á–∞—Å–∞ (–≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å–ª–æ—Ç)
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –∏–∑ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤
    let hourSlots = [selectedSlot];
    
    // –ü–æ–ª—É—á–∞–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–æ–≤–æ–≥–æ —Å–ª–æ—Ç–∞
    let nextHourExpected = new Date(selectedStartTime);
    nextHourExpected.setHours(nextHourExpected.getHours() + 1);
    
    // –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ª–æ—Ç—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    const sortedSlots = [...slots].sort((a, b) => a.start.getTime() - b.start.getTime());
    
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º —Å–ª–æ—Ç–∞–º –ø–æ—Å–ª–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ
    for (let i = 0; i < sortedSlots.length; i++) {
      const slot = sortedSlots[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª–æ—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Ä–∞–Ω—å—à–µ –∏–ª–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º
      if (slot.start <= selectedStartTime) continue;
      
      const slotStartTime = new Date(slot.start);
      
      // –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–∂–∏–¥–∞–µ–º—ã–º –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –Ω–∞—á–∞–ª–∞ —Å–ª–æ—Ç–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
      const diffMinutes = Math.abs(
        (slotStartTime.getTime() - nextHourExpected.getTime()) / (60 * 1000)
      );
      
      // –ï—Å–ª–∏ —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–Ω—å—à–µ 5 –º–∏–Ω—É—Ç, —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ—Ç —Å–ª–æ—Ç —Å–ª–µ–¥—É—é—â–∏–º –ø–æ –ø–æ—Ä—è–¥–∫—É
      if (diffMinutes < 5) {
        availableHours++;
        hourSlots.push(slot);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —á–∞—Å–∞
        nextHourExpected = new Date(slotStartTime);
        nextHourExpected.setHours(nextHourExpected.getHours() + 1);
        
        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 8 —á–∞—Å–∞–º–∏
        if (availableHours >= 8) break;
      }
    }
    
    console.log('–ù–∞–π–¥–µ–Ω–æ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤:', availableHours);
    console.log('–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã:', hourSlots.map(s => s.formattedTime));
    
    return Math.min(availableHours, 8);
  };

  return (
    <div className={styles.calendarContainer}>
      <div className={styles.calendarHeader}>
        <h1 className={styles.title}>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</h1>
        <button className={styles.backButton} onClick={() => navigate('/')}>
          –ù–∞–∑–∞–¥
        </button>
      </div>
      
      {!bookingCompleted ? (
        <div className={styles.calendarContent}>
          <div className={styles.calendar}>
            <div className={styles.calendarNav}>
              <button 
                className={styles.navButton} 
                onClick={goToPreviousMonth}
              >
                &#10094;
              </button>
              <h2 className={styles.currentMonth}>{currentMonthYear}</h2>
              <button 
                className={styles.navButton} 
                onClick={goToNextMonth}
              >
                &#10095;
              </button>
            </div>
            
            <div className={styles.weekdays}>
              {weekDays.map(day => (
                <div key={day} className={styles.weekday}>{day}</div>
              ))}
            </div>
            
            <div className={styles.daysGrid}>
              {days.map((day, index) => (
                <div 
                  key={index}
                  className={`
                    ${styles.day} 
                    ${!day.isCurrentMonth ? styles.otherMonth : ''} 
                    ${day.isAvailable ? styles.available : styles.unavailable}
                    ${day.isToday ? styles.today : ''}
                    ${selectedDate && isSameDay(day.date, selectedDate) ? styles.selected : ''}
                  `}
                  onClick={() => handleDateClick(day)}
                >
                  {day.date.getDate()}
                </div>
              ))}
            </div>
          </div>
          
          <div className={styles.bookingSelection}>
            {/* –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ */}
            <div className={styles.timeSelection}>
              {selectedDate ? (
                <>
                  <h3 className={styles.sectionTitle}>
                    {formatDate(selectedDate)}
                  </h3>
                  
                  {loadingSlots ? (
                    <div className={styles.loadingMessage}>
                      –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...
                    </div>
                  ) : slotsError ? (
                    <div className={styles.errorMessage}>
                      {slotsError}
                    </div>
                  ) : availableTimeSlots.length > 0 ? (
                    <div className={styles.timeSlots}>
                      {availableTimeSlots.map(time => (
                        <button 
                          key={time}
                          className={`${styles.timeSlot} ${selectedTime === time ? styles.selectedTime : ''}`}
                          onClick={() => handleTimeSlotClick(time)}
                        >
                          {time}
                        </button>
                      ))}
                    </div>
                  ) : (
                    <div className={styles.noTimeSlotsMessage}>
                      –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
                    </div>
                  )}
                </>
              ) : (
                <div className={styles.loadingMessage}>
                  –ó–∞–≥—Ä—É–∑–∫–∞ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤...
                </div>
              )}
            </div>
            
            {/* –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ */}
            {selectedTime && (
              <div className={styles.planSelection}>
                <h3 className={styles.sectionTitle}>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ</h3>
                
                <div className={styles.planGrid}>
                  {pricingPlans.map((plan) => (
                    <div 
                      key={plan.id}
                      className={`${styles.planCard} ${selectedPlan?.id === plan.id ? styles.selectedPlan : ''}`}
                      onClick={() => handlePlanClick(plan)}
                    >
                      <div className={styles.planIcon}>{plan.icon}</div>
                      <h4 className={styles.planTitle}>{plan.title}</h4>
                      <div className={styles.planPrice}>{plan.price} ‚ÇΩ/—á</div>
                      <p className={styles.planDescription}>{plan.description}</p>
                    </div>
                  ))}
                </div>
              </div>
            )}
            
            {/* –°–µ–∫—Ü–∏—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –∏ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ */}
            {selectedPlan && (
              <div className={styles.durationSelection}>
                <h3 className={styles.sectionTitle}>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å</h3>
                
                <div className={styles.hoursControls}>
                  <button 
                    className={styles.hoursButton}
                    onClick={() => handleHoursChange(hours - 1)}
                    disabled={hours <= 1}
                  >
                    -
                  </button>
                  <div className={styles.hoursDisplay}>
                    <span className={styles.hoursValue}>{hours}</span> —á.
                  </div>
                  <button 
                    className={styles.hoursButton}
                    onClick={() => handleHoursChange(hours + 1)}
                    disabled={hours >= maxAvailableHours}
                  >
                    +
                  </button>
                </div>
                
                {maxAvailableHours < 8 && (
                  <div className={styles.availabilityInfo}>
                    –í –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –Ω–∞ {maxAvailableHours} {maxAvailableHours === 1 ? '—á–∞—Å' : maxAvailableHours < 5 ? '—á–∞—Å–∞' : '—á–∞—Å–æ–≤'}
                  </div>
                )}
                
                <div className={styles.totalPrice}>
                  <span>–ò—Ç–æ–≥–æ:</span>
                  <span className={styles.priceValue}>{calculateTotalPrice()} ‚ÇΩ</span>
                </div>
                
                <button 
                  className={styles.bookButton}
                  onClick={handleBooking}
                >
                  –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å
                </button>
              </div>
            )}
          </div>
        </div>
      ) : (
        <div className={styles.bookingCompletedContainer}>
          <div className={styles.bookingSuccessCard}>
            <div className={styles.successIcon}>‚úì</div>
            <h2 className={styles.successTitle}>–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!</h2>
            
            <div className={styles.bookingDetails}>
              <div className={styles.bookingDetail}>
                <span className={styles.detailLabel}>–î–∞—Ç–∞:</span>
                <span className={styles.detailValue}>{formatDate(bookingDetails!.date)}</span>
              </div>
              <div className={styles.bookingDetail}>
                <span className={styles.detailLabel}>–í—Ä–µ–º—è:</span>
                <span className={styles.detailValue}>{bookingDetails!.time}</span>
              </div>
              <div className={styles.bookingDetail}>
                <span className={styles.detailLabel}>–¢–∞—Ä–∏—Ñ:</span>
                <span className={styles.detailValue}>{bookingDetails!.plan.title}</span>
              </div>
              <div className={styles.bookingDetail}>
                <span className={styles.detailLabel}>–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                <span className={styles.detailValue}>{bookingDetails!.hours} —á.</span>
              </div>
              <div className={styles.bookingDetail}>
                <span className={styles.detailLabel}>–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                <span className={styles.detailValue}>{bookingDetails!.totalPrice} ‚ÇΩ</span>
              </div>
            </div>
            
            <h3 className={styles.productsTitle}>–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã –¥–ª—è –±–æ–∫—Å–∞?</h3>
            <p className={styles.productsDescription}>
              –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –≤–∞—Å –∂–¥–∞—Ç—å –≤ –±–æ–∫—Å–µ.
            </p>
            
            <div className={styles.actionButtons}>
              <button 
                className={styles.addProductsButton}
                onClick={goToProducts}
              >
                –î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä—ã
              </button>
              
              <button 
                className={styles.skipButton}
                onClick={addBookingToCart}
              >
                –ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default CalendarPage; 