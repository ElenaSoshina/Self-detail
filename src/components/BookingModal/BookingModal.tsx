import React, { useState, useEffect, useMemo } from 'react';
import styles from './BookingModal.module.css';
import SuccessPopup from '../SuccessPopup/SuccessPopup';
import {
  sendTelegramMessage,
  sendTelegramMessageByUsername,
  formatUserMessage,
  formatAdminMessage,
  sendTelegramMessageToAllAdmins
} from '../../api/telegram';
import PhoneInput from 'react-phone-number-input/input';
import 'react-phone-number-input/style.css';
import { useCart } from '../../context/CartContex';
import api from '../../api/apiService';
import CalendarConfirmModal from '../CalendarConfirmModal/CalendarConfirmModal';

interface BookingModalProps {
  isOpen: boolean;
  onClose: () => void;
  startTime: string;
  endTime: string;
  duration?: number;
  service?: {
    serviceName: string;
    price: number;
  } | null;
  onSubmit: (formData: any) => void;
  selectedDate: Date | null;
  isAdmin?: boolean;
  prefilledData?: {
    name: string;
    phone: string;
    email: string;
    telegramUserName: string;
  };
  startTimeContext?: 'current' | 'next' | null;
  endTimeContext?: 'current' | 'next' | null;
}

interface FormData {
  name: string;
  phone: string;
  email: string;
  telegramUserName: string;
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
interface UserData {
  id: number;
  telegramUserId: number;
  telegramUserName: string;
  clientName: string;
  clientPhone: string;
  clientEmail: string;
  createdAt: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramUserId
const checkUserExists = async (telegramUserId: number): Promise<boolean> => {
  try {
    const response = await api.get('/users');
    const data = response.data;
    
    if (data.success && data.data && data.data.content) {
      return data.data.content.some((user: UserData) => user.telegramUserId === telegramUserId);
    }
    return false;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ telegramUserId
const getUserData = async (telegramUserId: number): Promise<UserData | null> => {
  try {
    const response = await api.get(`/users/${telegramUserId}`);
    const data = response.data;
    
    if (data.success && data.data) {
      return data.data;
    }
    return null;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return null;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const saveUserData = async (userData: {
  telegramUserId: number;
  telegramUserName: string;
  clientName: string;
  clientPhone: string;
  clientEmail: string;
}): Promise<boolean> => {
  try {
    console.log('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
    const response = await api.post('/users', userData);
    const data = response.data;
    
    if (data.success) {
      console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      return true;
    } else {
      console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', data.errorMessage);
      return false;
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    return false;
  }
};

const BookingModal: React.FC<BookingModalProps> = ({
  isOpen,
  onClose,
  startTime,
  endTime,
  duration,
  service,
  onSubmit,
  selectedDate,
  isAdmin,
  prefilledData,
  startTimeContext,
  endTimeContext
}) => {
  console.log('üìÑ BookingModal - –ü–æ–ª—É—á–µ–Ω—ã props:', {
    isOpen: isOpen,
    startTime: startTime,
    endTime: endTime,
    duration: duration,
    service: service,
    selectedDate: selectedDate,
    selectedDateFormatted: selectedDate ? selectedDate.toLocaleDateString('ru-RU', { 
      day: 'numeric', 
      month: 'long', 
      year: 'numeric' 
    }) : 'null',
    isAdmin: isAdmin
  });
  
  const [formData, setFormData] = useState<FormData>({
    name: prefilledData?.name || '',
    phone: prefilledData?.phone || '',
    email: prefilledData?.email || '',
    telegramUserName: prefilledData?.telegramUserName || '',
  });
  const [showSuccess, setShowSuccess] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [chatId, setChatId] = useState<string | null>(null);
  const [fieldErrors, setFieldErrors] = useState<{ name?: string; phone?: string; email?: string; telegramUserName?: string }>({});
  const { items } = useCart();
  const products = items.filter(item => item.type !== 'booking');
  const productsTotal = products.reduce((sum, p) => sum + p.price * p.quantity, 0);
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  const [bookingId, setBookingId] = useState<number | null>(null);
    const [eventDetails, setEventDetails] = useState<{
    title: string;
    description: string;
    location: string;
    start: Date;
    end: Date;
  } | null>(null);
  const [showCalendarModal, setShowCalendarModal] = useState(false);
  const [isCalendarLoading, setIsCalendarLoading] = useState(false);
  
  // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏
  const [displayTime, setDisplayTime] = useState('');

  // –ü–æ–ª—É—á–∞–µ–º chatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
  useEffect(() => {
    const tg = (window as any).Telegram?.WebApp;
    if (tg?.initDataUnsafe?.user?.id) {
      const userId = tg.initDataUnsafe.user.id.toString();
      setChatId(userId);
      tg.ready?.();
    }
  }, []);

  // –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  useEffect(() => {
    const loadUserData = async () => {
      // –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —á–µ—Ä–µ–∑ prefilledData, –Ω–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º
      if (prefilledData && (prefilledData.name || prefilledData.phone || prefilledData.email)) {
        return;
      }

      const tg = (window as any).Telegram?.WebApp;
      if (tg?.initDataUnsafe?.user?.id && isOpen) {
        const telegramUserId = tg.initDataUnsafe.user.id;
        
        try {
          console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', telegramUserId);
          const userExists = await checkUserExists(telegramUserId);
          
          if (userExists) {
            console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω, –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ...');
            const userData = await getUserData(telegramUserId);
            
            if (userData) {
              console.log('üìã –ê–≤—Ç–æ–∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –¥–∞–Ω–Ω—ã–º–∏:', userData);
              
              // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
              let formattedPhone = userData.clientPhone || '';
              if (formattedPhone && !formattedPhone.startsWith('+7')) {
                // –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å +7, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
                if (formattedPhone.startsWith('7')) {
                  formattedPhone = '+' + formattedPhone;
                } else if (formattedPhone.startsWith('8')) {
                  formattedPhone = '+7' + formattedPhone.substring(1);
                } else {
                  formattedPhone = '+7' + formattedPhone;
                }
              }
              
              setFormData({
                name: userData.clientName || '',
                phone: formattedPhone,
                email: userData.clientEmail || '',
                telegramUserName: userData.telegramUserName || '',
              });
            }
          } else {
            console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ñ–æ—Ä–º–∞ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç–æ–π');
          }
        } catch (error) {
          console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
        }
      }
    };

    loadUserData();
  }, [isOpen, prefilledData]);

  // –ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –≤ useEffect –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç selectedDate
  useEffect(() => {
    // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if (startTime) {
      // –ò—â–µ–º –≤—Å–µ —á–∏—Å–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –ß–ß:–ú–ú
      const timeMatches = startTime.match(/\d{1,2}:\d{2}/g);
      if (timeMatches && timeMatches.length >= 2) {
        // –ï—Å–ª–∏ –≤ startTime –Ω–∞–π–¥–µ–Ω—ã –¥–≤–∞ –≤—Ä–µ–º–µ–Ω–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
        setDisplayTime(`${timeMatches[0]} - ${timeMatches[1]}`);
      } else if (startTime && endTime) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ startTime –∏ endTime
        setDisplayTime(`${startTime} - ${endTime}`);
      } else {
        // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ –≤—Ä–µ–º—è –≤ startTime
        setDisplayTime(startTime);
      }
    }
  }, [startTime, endTime]);

  // –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ serviceName <-> serviceRu
  const serviceNameMap: { [key: string]: string } = {
    '–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ': '–í—Å–µ –≤–∫–ª—é—á–µ–Ω–æ',
    '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã': '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã'
  };

  // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —á–∞—Å–æ–≤ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
  const durationHours = useMemo(() => {
    // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –≥–æ—Ç–æ–≤–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
    if (duration !== undefined) {
      return duration;
    }
    
    // Fallback –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ duration –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –≤—ã–∑–æ–≤–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)
    try {
      let start, end;
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ startTime –¥–∏–∞–ø–∞–∑–æ–Ω
      if (startTime.includes('‚Äî') || startTime.includes('-')) {
        const parts = startTime.split(/[‚Äî-]/).map(s => s.trim());
        start = parts[0];
        end = parts[1];
      } else {
        start = startTime;
        end = endTime;
      }
      
      if (!start || !end) {
        return 1;
      }
      
      const [startH, startM] = start.split(':').map(Number);
      const [endH, endM] = end.split(':').map(Number);
      
      let hours = endH - startH;
      
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞, –∑–Ω–∞—á–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥ —á–µ—Ä–µ–∑ –¥–µ–Ω—å
      if (endH < startH || (endH === startH && endM < startM)) {
        hours = (24 - startH) + endH;
      }
      
      // –£—á–∏—Ç—ã–≤–∞–µ–º –º–∏–Ω—É—Ç—ã
      if (endM > startM) hours += 1;
      
      return hours > 0 ? hours : 1;
    } catch (error) {
      console.error('Error in duration calculation:', error);
      return 1;
    }
  }, [startTime, endTime, duration]);

  const getDurationHours = () => {
    return durationHours;
  };
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–∞–Ω–Ω—ã—Ö
  const checkSource = () => {
    if (startTime.includes(' - ') || startTime.includes(' ‚Äî ')) {
      // –ï—Å–ª–∏ –≤—Ä–µ–º—è –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º, –∑–Ω–∞—á–∏—Ç –æ–Ω–æ –ø—Ä–∏—à–ª–æ –∏–∑ BookingSuccess
      return 'BookingSuccess';
    }
    return 'Other';
  };
  const dataSource = checkSource();
  
  // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const hasService = Boolean(service && service.serviceName && service.serviceName !== '');
  const baseServicePrice = service?.price ?? 0; // –ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑ props
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞: –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –∏–ª–∏ –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
  const isFromCart = Boolean(window.location.href.includes('/cart'));
  
  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏
  // –ï—Å–ª–∏ –ø—Ä–∏—à–ª–∏ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, —Ü–µ–Ω–∞ —É–∂–µ –≤–∫–ª—é—á–∞–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  // –ï—Å–ª–∏ –Ω–µ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã, –Ω—É–∂–Ω–æ —É–º–Ω–æ–∂–∏—Ç—å –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
  const servicePrice = isFromCart ? baseServicePrice : baseServicePrice * getDurationHours();
  
  const serviceRu = hasService && service?.serviceName ? (serviceNameMap[service.serviceName] || service.serviceName) : '';
  
  // –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: —É—Å–ª—É–≥–∞ + —Ç–æ–≤–∞—Ä—ã
  const totalPrice = (hasService ? servicePrice : 0) + productsTotal;

  const validate = (): boolean => {
    const newErrors: { name?: string; phone?: string; email?: string; telegramUserName?: string } = {};
    if (!formData.name.trim()) {
      newErrors.name = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è';
    }
    const phone = formData.phone.replace(/\u00A0/g, ' ');
    const phoneDigits = phone.replace(/\D/g, '');
    if (!phone.trim()) {
      newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    } else if (!phone.startsWith('+7')) {
      newErrors.phone = '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +7';
    } else if (phoneDigits.length !== 11) {
      newErrors.phone = '–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä';
    }
    if (!formData.email.trim()) {
      newErrors.email = '–í–≤–µ–¥–∏—Ç–µ email';
    } else if (!/^\S+@\S+\.\S+$/.test(formData.email)) {
      newErrors.email = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    }
    if (!formData.telegramUserName.trim()) {
      newErrors.telegramUserName = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username –≤ Telegram';
    } else if (!formData.telegramUserName.trim().startsWith('@')) {
      newErrors.telegramUserName = 'Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @';
    } else if (formData.telegramUserName.trim() === '@') {
      newErrors.telegramUserName = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ @';
    }
    setFieldErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('üîÑ BookingModal - –ù–∞—á–∞–ª–æ handleSubmit');
    
    if (!validate()) {
      console.log('‚ùå BookingModal - –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ –ø—Ä–æ—à–ª–∞, –æ—à–∏–±–∫–∏:', fieldErrors);
      return;
    }
    
    console.log('‚úÖ BookingModal - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    
    setIsLoading(true);
    setError(null);
    console.log('üîÑ BookingModal - –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö');
    
    try {
      console.log('üîÑ BookingModal - –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è:', { startTime, endTime });
      
      // –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –¥–∞—Ç—É
      let startTimeStr = startTime;
      let endTimeStr = endTime;
      
      // –ï—Å–ª–∏ startTime —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∏–∞–ø–∞–∑–æ–Ω –≤—Ä–µ–º–µ–Ω–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "17:00 ‚Äî 01:00")
      if (startTime.includes('‚Äî') || startTime.includes('-')) {
        const times = startTime.match(/\d{1,2}:\d{2}/g);
        if (times && times.length >= 2) {
          startTimeStr = times[0];
          endTimeStr = times[1];
        }
      }
      
      console.log('üîÑ BookingModal - –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:', { startTimeStr, endTimeStr });
      
      const date = selectedDate || new Date();
      console.log('üîÑ BookingModal - –í—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:', date);
      
      // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—ã –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
      let startDate = new Date(date);
      let endDate = new Date(date);
      
      // –ï—Å–ª–∏ startTime –∏–∑ —Å–µ–∫—Ü–∏–∏ "—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è"
      if (startTimeContext === 'next') {
        startDate.setDate(startDate.getDate() + 1);
      }
      
      // –ï—Å–ª–∏ endTime –∏–∑ —Å–µ–∫—Ü–∏–∏ "—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è"
      if (endTimeContext === 'next') {
        endDate.setDate(endDate.getDate() + 1);
      }
      
      // Fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)
      if (!startTimeContext && !endTimeContext) {
        // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–∂—Å—É—Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
        let start, end;
        
        if (startTime.includes('‚Äî') || startTime.includes('-')) {
          const parts = startTime.split(/[‚Äî-]/).map(s => s.trim());
          start = parts[0];
          end = parts[1];
        } else {
          start = startTime;
          end = endTime;
        }
        
        if (start && end) {
          const [startH] = start.split(':').map(Number);
          const [endH] = end.split(':').map(Number);
          
          // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞, –∑–Ω–∞—á–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
          if (endH < startH) {
            endDate.setDate(endDate.getDate() + 1);
          }
        }
      }
      
      console.log('üîÑ BookingModal - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', {
        originalDate: date,
        startDate: startDate,
        endDate: endDate,
        startTimeContext: startTimeContext,
        endTimeContext: endTimeContext,
        usedFallbackLogic: !startTimeContext && !endTimeContext
      });
      
      // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
      const [startHour, startMinute] = startTimeStr.split(':').map(Number);
      const [endHour, endMinute] = endTimeStr.split(':').map(Number);
      
      console.log('üîÑ BookingModal - –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏:', { startHour, startMinute, endHour, endMinute });
      
      startDate.setHours(startHour, startMinute, 0, 0);
      endDate.setHours(endHour, endMinute, 0, 0);
      
      // –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–æ–∑–¥–∞–µ–º ISO —Å—Ç—Ä–æ–∫–∏ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º, –∞ –Ω–µ UTC
      const formatToMoscowISO = (date: Date) => {
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const hours = String(date.getHours()).padStart(2, '0');
        const minutes = String(date.getMinutes()).padStart(2, '0');
        const seconds = String(date.getSeconds()).padStart(2, '0');
        
        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO –Ω–æ —Å –º–æ—Å–∫–æ–≤—Å–∫–∏–º –≤—Ä–µ–º–µ–Ω–µ–º
        return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}`;
      };
      
      const startISO = formatToMoscowISO(startDate);
      const endISO = formatToMoscowISO(endDate);
      
      console.log('üîÑ BookingModal - ISO –¥–∞—Ç—ã:', { startISO, endISO });

      const payload = {
        telegramUserId: chatId || "0",
        telegramUserName: formData.telegramUserName,
        clientName: formData.name,
        clientPhone: formData.phone.replace('+',''),
        clientEmail: formData.email,
        start: startISO,
        end: endISO,
        service: hasService ? [{ serviceName: service!.serviceName, price: servicePrice }] : [],
        notes: ''
      };

      console.log('üöÄ BookingModal - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', payload);

      console.log('üîÑ BookingModal - –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      const res = await api.post('/calendar/booking', payload);
      
      const id = res.data?.data?.bookingId;
      if (!id) throw new Error('bookingId –Ω–µ –≤–µ—Ä–Ω—É–ª—Å—è');
      
      setBookingId(id);

      // —Å–æ–±–∏—Ä–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Å–æ–±—ã—Ç–∏—è
      setEventDetails({
        title: `–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: ${service?.serviceName ?? ''}`,
        description: `–£—Å–ª—É–≥–∏: ${service?.serviceName ?? ''}\n–ö–æ–Ω—Ç–∞–∫—Ç: ${formData.name}, —Ç–µ–ª: ${formData.phone}`,
        location: 'Self-Detailing Location',
        start: new Date(startISO),
        end: new Date(endISO),
      });
      
      // –æ—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–∞—à–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      setShowCalendarModal(true);
      
      const adminMsg = formatAdminMessage(payload, { price: servicePrice }, service?.serviceName ?? '');
      const userMsg  = formatUserMessage(payload, { price: servicePrice }, service?.serviceName ?? '');
      
      console.log('üì≤ BookingModal - –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram:', {
        payload: payload,
        servicePrice: servicePrice,
        serviceName: service?.serviceName ?? '',
        adminMsg: adminMsg,
        userMsg: userMsg,
        isAdmin: isAdmin,
        chatId: chatId,
        timestamp: new Date().toISOString()
      });
      
      console.log('üì§ BookingModal - –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...');
      
      try {
        if (isAdmin) {
          console.log('üë§ –†–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º');
          await sendTelegramMessageToAllAdmins(adminMsg);
        } else {
          console.log('üë• –†–µ–∂–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏ –∞–¥–º–∏–Ω–∞–º');
          if (chatId) {
            console.log('üì± –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ —á–∞—Ç:', chatId);
            await sendTelegramMessage(chatId, userMsg);
          } else {
            console.log('‚ö†Ô∏è ChatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é');
          }
          console.log('üì¢ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');
          await sendTelegramMessageToAllAdmins(adminMsg);
        }
        
        console.log('‚úÖ –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');
      } catch (telegramError: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:', {
          error: telegramError.message,
          stack: telegramError.stack,
          isAdmin: isAdmin,
          chatId: chatId
        });
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫ Telegram, –Ω–æ –ª–æ–≥–∏—Ä—É–µ–º –∏—Ö
        console.warn('‚ö†Ô∏è –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ, –Ω–æ –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±—É–¥—É—â–∏—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
      try {
        const tg = (window as any).Telegram?.WebApp;
        if (tg?.initDataUnsafe?.user?.id) {
          const telegramUserId = tg.initDataUnsafe.user.id;
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          const userExists = await checkUserExists(telegramUserId);
          
          if (!userExists) {
            // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            const userDataToSave = {
              telegramUserId: telegramUserId,
              telegramUserName: formData.telegramUserName,
              clientName: formData.name,
              clientPhone: formData.phone.replace('+', ''),
              clientEmail: formData.email
            };
            
            await saveUserData(userDataToSave);
          } else {
            console.log('‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ');
          }
        }
      } catch (userSaveError) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userSaveError);
        // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —Ç–∞–∫ –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ
      }

    } catch (err: any) {
      setError(err.message || '–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
    } finally {
      setIsLoading(false);
    }
  };
  
  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const { name, value } = e.target;
    // –ê–≤—Ç–æ-–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ @ –¥–ª—è Telegram
    if (name === 'telegramUserName' && value && !value.startsWith('@') && value !== '@') {
      setFormData(prev => ({ ...prev, [name]: `@${value}` }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
    setFieldErrors((prev) => ({ ...prev, [name]: undefined }));
  };

  const handlePhoneChange = (value: string | undefined) => {
    const digits = (value || '').replace(/\D/g, '');
    if (digits.length > 11) return;
    setFormData(prev => ({ ...prev, phone: value || '' }));
    setFieldErrors((prev) => ({ ...prev, phone: undefined }));
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  const handleAddToCalendar = async () => {
    if (!bookingId) {
      return;
    }
    
    setIsCalendarLoading(true);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    setTimeout(() => {
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
      if (onSubmit) {
        const submittedData = {
          name: formData.name,
          phone: formData.phone,
          email: formData.email,
          telegramUserName: formData.telegramUserName,
          selectedDate: selectedDate || new Date(),
          startTime: startTime, 
          endTime: endTime,
          service: hasService && service 
            ? { 
                serviceName: service.serviceName,
                price: servicePrice
              }
            : null,
          bookingId: bookingId,
          addedToCalendar: true  // –§–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–∏–ª –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        };
        
        onSubmit(submittedData);
      }
      
      // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
      setShowCalendarModal(false);
      setShowSuccess(true);
      onClose();
      setIsCalendarLoading(false);
    }, 1000);
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–∫–∞–∑–∞ –æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
  const handleDeclineCalendar = async () => {
    // –í—ã–∑—ã–≤–∞–µ–º onSubmit —Å –¥–∞–Ω–Ω—ã–º–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—à–Ω–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    if (onSubmit) {
      const submittedData = {
        name: formData.name,
        phone: formData.phone,
        email: formData.email,
        telegramUserName: formData.telegramUserName,
        selectedDate: selectedDate || new Date(),
        startTime: startTime, 
        endTime: endTime,
        service: hasService && service 
          ? { 
              serviceName: service.serviceName,
              price: servicePrice
            }
          : null,
        bookingId: bookingId,
        addedToCalendar: false  // –§–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –¥–æ–±–∞–≤–ª—è—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å
      };
      
      await onSubmit(submittedData);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
    setShowCalendarModal(false);
    setShowSuccess(true);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div className={styles.modalOverlay} onClick={onClose}>
      <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
        <button className={styles.closeButton} onClick={onClose}>
          √ó
        </button>
        <h2 className={styles.modalTitle}>
          {hasService ? '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è' : '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞'}
        </h2>
        
        <div className={styles.bookingInfo}>
          {hasService && (
            <>
              <div className={styles.infoRow}>
                <span className={styles.infoLabel}>–î–∞—Ç–∞:</span>
                <span className={styles.infoValue}>
                  {(() => {
                    if (!selectedDate) return '';
                    
                    console.log('üìÖ BookingModal - –†–∞—Å—á–µ—Ç –¥–∞—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è:', {
                      selectedDate: selectedDate,
                      selectedDateFormatted: selectedDate.toLocaleDateString('ru-RU'),
                      startTime: startTime,
                      endTime: endTime,
                      startTimeContext: startTimeContext,
                      endTimeContext: endTimeContext
                    });
                    
                    const formatDate = (date: Date) => {
                      return date.toLocaleDateString('ru-RU', { 
                        day: 'numeric', 
                        month: 'long', 
                        year: 'numeric' 
                      });
                    };
                    
                    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    let actualStartDate = new Date(selectedDate);
                    let actualEndDate = new Date(selectedDate);
                    
                    // –ï—Å–ª–∏ startTime –∏–∑ —Å–µ–∫—Ü–∏–∏ "—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è"
                    if (startTimeContext === 'next') {
                      actualStartDate.setDate(actualStartDate.getDate() + 1);
                    }
                    
                    // –ï—Å–ª–∏ endTime –∏–∑ —Å–µ–∫—Ü–∏–∏ "—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è"  
                    if (endTimeContext === 'next') {
                      actualEndDate.setDate(actualEndDate.getDate() + 1);
                    }
                    
                    // Fallback –ª–æ–≥–∏–∫–∞ –¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã)
                    if (!startTimeContext && !endTimeContext) {
                      // –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–µ–∂—Å—É—Ç–æ—á–Ω–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
                      let start, end;
                      
                      if (startTime.includes('‚Äî') || startTime.includes('-')) {
                        const parts = startTime.split(/[‚Äî-]/).map(s => s.trim());
                        start = parts[0];
                        end = parts[1];
                      } else {
                        start = startTime;
                        end = endTime;
                      }
                      
                      if (start && end) {
                        const [startH] = start.split(':').map(Number);
                        const [endH] = end.split(':').map(Number);
                        
                        // –ï—Å–ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞, –∑–Ω–∞—á–∏—Ç –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
                        if (endH < startH) {
                          actualEndDate.setDate(actualEndDate.getDate() + 1);
                        }
                      }
                    }
                    
                    console.log('üìÖ BookingModal - –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞—Ç—ã —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞:', {
                      originalSelectedDate: formatDate(selectedDate),
                      actualStartDate: formatDate(actualStartDate),
                      actualEndDate: formatDate(actualEndDate),
                      startTimeContext: startTimeContext,
                      endTimeContext: endTimeContext,
                      usedFallbackLogic: !startTimeContext && !endTimeContext
                    });
                    
                    // –ï—Å–ª–∏ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –∫–æ–Ω—Ü–∞ —Ä–∞–∑–Ω—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
                    if (actualStartDate.toDateString() !== actualEndDate.toDateString()) {
                      return `${formatDate(actualStartDate)} ‚Äî ${formatDate(actualEndDate)}`;
                    } else {
                      // –ï—Å–ª–∏ –¥–∞—Ç—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–¥–Ω—É –¥–∞—Ç—É
                      return formatDate(actualStartDate);
                    }
                  })()}
                </span>
              </div>
              <div className={styles.infoRow}>
                <span className={styles.infoLabel}>–£—Å–ª—É–≥–∞:</span>
                <span className={styles.infoValue}>{serviceRu}</span>
              </div>
              <div className={styles.infoRow}>
                <span className={styles.infoLabel}>–í—Ä–µ–º—è:</span>
                <span className={styles.infoValue}>
                  {displayTime}
                </span>
              </div>
              <div className={styles.infoRow}>
                <span className={styles.infoLabel}>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span>
                <span className={styles.infoValue}>{getDurationHours()} —á.</span>
              </div>
              <div className={styles.infoRow}>
                <span className={styles.infoLabel}>–°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏: </span>
                <span className={styles.infoValue}>{servicePrice} ‚ÇΩ</span>
              </div>
            </>
          )}
          {products.length > 0 && products.map(product => (
            <div className={styles.infoRow} key={product.id}>
              <span className={styles.infoLabel}>{product.name} x{product.quantity}</span>
              <span className={styles.infoValue}>{product.price * product.quantity} ‚ÇΩ</span>
            </div>
          ))}
          {products.length > 0 && (
            <div className={styles.infoRow}>
              <span className={styles.infoLabel}>–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤:</span>
              <span className={styles.infoValue}>{productsTotal} ‚ÇΩ</span>
            </div>
          )}
          <div className={styles.infoRow}>
            <span className={styles.infoLabel}>–ò—Ç–æ–≥–æ:</span>
            <span className={styles.infoValue}>{totalPrice} ‚ÇΩ</span>
          </div>
        </div>

        <form onSubmit={handleSubmit}>
          <div className={styles.formGroup}>
            <label className={styles.label} htmlFor="name">
              –í–∞—à–µ –∏–º—è
            </label>
            <input
              className={`${styles.input} ${fieldErrors.name ? styles.inputError : ''}`}
              type="text"
              id="name"
              name="name"
              value={formData.name}
              onChange={handleChange}
              placeholder="–í–∞—à–µ –∏–º—è"
              maxLength={40}
            />
            {fieldErrors.name && <div className={styles.errorMessage}>{fieldErrors.name}</div>}
          </div>

          <div className={styles.formGroup}>
            <label className={styles.label} htmlFor="phone">
              –¢–µ–ª–µ—Ñ–æ–Ω
            </label>
            <PhoneInput
              country="RU"
              international
              withCountryCallingCode
              id="phone"
              name="phone"
              value={formData.phone}
              onChange={handlePhoneChange}
              className={`${styles.input} ${fieldErrors.phone ? styles.inputError : ''}`}
              placeholder="+7 (___) ___-__-__"
              disabled={isLoading}
            />
            {fieldErrors.phone && <div className={styles.errorMessage}>{fieldErrors.phone}</div>}
          </div>

          <div className={styles.formGroup}>
            <label className={styles.label} htmlFor="email">
              Email
            </label>
            <input
              className={styles.input}
              type="email"
              id="email"
              name="email"
              value={formData.email}
              onChange={handleChange}
              placeholder="your@email.com"
              maxLength={40}
            />
            {fieldErrors.email && (
              <div className={styles.errorMessage}>{fieldErrors.email}</div>
            )}
          </div>

          <div className={styles.formGroup}>
            <label className={styles.label} htmlFor="telegramUserName">
              Telegram Username
            </label>
            <input
              className={`${styles.input} ${fieldErrors.telegramUserName ? styles.inputError : ''}`}
              type="text"
              id="telegramUserName"
              name="telegramUserName"
              value={formData.telegramUserName}
              onChange={handleChange}
              placeholder="@username"
              maxLength={32}
            />
            {fieldErrors.telegramUserName && <div className={styles.errorMessage}>{fieldErrors.telegramUserName}</div>}
          </div>

          <button 
            type="submit" 
            className={styles.submitButton}
            disabled={isLoading}
          >
            {isLoading ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
          </button>
        </form>
      </div>
      <SuccessPopup isOpen={showSuccess} onClose={() => setShowSuccess(false)} />
      
      {eventDetails && bookingId !== null && (
        <CalendarConfirmModal
          isOpen={showCalendarModal}
          onClose={handleDeclineCalendar}
          onConfirm={handleAddToCalendar}
          bookingId={bookingId}
          event={eventDetails}
          isLoading={isCalendarLoading}
        />
      )}
    </div>
  );
};

export default BookingModal;