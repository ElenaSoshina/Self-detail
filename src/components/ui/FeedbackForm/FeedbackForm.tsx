import React, { useState, useEffect, useRef } from 'react';
import axios from 'axios';
import PhoneInput from 'react-phone-number-input/input';
import 'react-phone-number-input/style.css';
import styles from './FeedbackForm.module.css';

interface FormData {
  name: string;
  phone: string;
  telegram: string;
  question: string;
}

interface FeedbackFormProps {
  onSubmit: (data: FormData) => void;
  onCancel?: () => void;
  onInputFocus?: (focused: boolean) => void;
}

const FeedbackForm: React.FC<FeedbackFormProps> = ({ 
  onSubmit, 
  onCancel,
  onInputFocus 
}) => {
  const [formData, setFormData] = useState<FormData>({
    name: '',
    phone: '',
    telegram: '',
    question: '',
  });
  
  const [errors, setErrors] = useState<Partial<FormData>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [chatId, setChatId] = useState<string | null>(null);
  
  // –°–æ–∑–¥–∞–µ–º —Ä–µ—Ñ—ã –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Ñ–æ—Ä–º—ã
  const formRef = useRef<HTMLFormElement>(null);
  const submitButtonRef = useRef<HTMLButtonElement>(null);

  // –ú–∞—Å—Å–∏–≤ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
  const adminChatIds: string[] = ['522814078'];

  // –ü–æ–ª—É—á–∞–µ–º chatId –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
  useEffect(() => {
    const tg = (window as any).Telegram?.WebApp;
    if (tg?.initDataUnsafe?.user?.id) {
      setChatId(tg.initDataUnsafe.user.id.toString());
      tg.ready?.();
    }
  }, []);
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ–∫—É—Å–∞ –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞
  const handleFocus = (e: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    if (onInputFocus) onInputFocus(true);
    
    // –ê–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –∫ –ø–æ–ª—é –≤–≤–æ–¥–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞—Ö
    if (window.innerWidth <= 768) {
      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
      setTimeout(() => {
        const input = e.target;
        const rect = input.getBoundingClientRect();
        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª–µ –≤–≤–æ–¥–∞ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ —ç–∫—Ä–∞–Ω–∞
        if (rect.bottom > window.innerHeight - 100) {
          // –°–∫—Ä–æ–ª–ª–∏–º –∫ –ø–æ–ª—é —Å –æ—Ç—Å—Ç—É–ø–æ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
          window.scrollTo({
            top: scrollTop + rect.top - 120,
            behavior: 'smooth'
          });
          
          // –ï—Å–ª–∏ —ç—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ, —Å–∫—Ä–æ–ª–ª–∏–º –µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç
          const modalContent = input.closest('.modalContent');
          if (modalContent) {
            modalContent.scrollTop = rect.top - 120;
          }
        }
      }, 300);
    }
  };
  
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ blur –¥–ª—è –ª—é–±–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞
  const handleBlur = () => {
    if (onInputFocus) onInputFocus(false);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–æ–ª—è telegram - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º @ –≤ –Ω–∞—á–∞–ª–æ, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (name === 'telegram' && value && !value.startsWith('@') && value !== '@') {
      setFormData(prev => ({ ...prev, [name]: `@${value}` }));
    } else {
      setFormData(prev => ({ ...prev, [name]: value }));
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—è
    if (errors[name as keyof FormData]) {
      setErrors(prev => ({ ...prev, [name]: '' }));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ PhoneInput
  const handlePhoneChange = (value: string | undefined) => {
    setFormData(prev => ({ ...prev, phone: value || '' }));
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (errors.phone) {
      setErrors(prev => ({ ...prev, phone: '' }));
    }
  };

  const validate = (): boolean => {
    const newErrors: Partial<FormData> = {};
    
    if (!formData.name.trim()) {
      newErrors.name = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è';
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –ø—É—Å—Ç—ã–º –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 10 —Ü–∏—Ñ—Ä)
    const phoneDigits = formData.phone.replace(/\D/g, '');
    if (!formData.phone.trim()) {
      newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    } else if (phoneDigits.length < 10) {
      newErrors.phone = '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
    }
    
    // –í–∞–ª–∏–¥–∞—Ü–∏—è telegram (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @)
    if (!formData.telegram.trim()) {
      newErrors.telegram = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à username –≤ Telegram';
    } else if (!formData.telegram.trim().startsWith('@')) {
      newErrors.telegram = 'Username –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å @';
    } else if (formData.telegram.trim() === '@') {
      newErrors.telegram = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ @';
    }
    
    if (!formData.question.trim()) {
      newErrors.question = '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å';
    }
    
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ API
  const sendMessageToTelegram = async () => {
    if (!chatId && !adminChatIds.length) {
      console.error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
      throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π');
    }

    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    const adminMessage = 
      `üîî –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!\n\n` +
      `üë§ –ò–º—è: ${formData.name}\n` +
      `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${formData.phone}\n` +
      `üì® Telegram: ${formData.telegram}\n\n` +
      `‚ùì –í–æ–ø—Ä–æ—Å:\n${formData.question}`;

    // –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const userMessage = 
      `‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å!\n\n` +
      `–ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –æ—Ç–≤–µ—Ç–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n` +
      `üìù –í–∞—à –≤–æ–ø—Ä–æ—Å:\n${formData.question}`;

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
      await Promise.all(
        adminChatIds.map(id =>
          axios.post(
            `https://backend.self-detailing.duckdns.org/api/v1/chat/send-message/${id}`,
            { message: adminMessage }
          )
        )
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–µ–Ω –µ–≥–æ chatId
      if (chatId) {
        await axios.post(
          `https://backend.self-detailing.duckdns.org/api/v1/chat/send-message/${chatId}`,
          { message: userMessage }
        );
      }

      return true;
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', error);
      throw error;
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validate()) {
      // –°–∫—Ä–æ–ª–ª –∫ –ø–µ—Ä–≤–æ–º—É –ø–æ–ª—é —Å –æ—à–∏–±–∫–æ–π
      const firstErrorField = Object.keys(errors)[0];
      if (firstErrorField) {
        const errorElement = document.querySelector(`[name="${firstErrorField}"]`);
        errorElement?.scrollIntoView({ behavior: 'smooth', block: 'center' });
      }
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
      await sendMessageToTelegram();
      
      // –ü–µ—Ä–µ–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
      onSubmit(formData);
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
      setFormData({
        name: '',
        phone: '',
        telegram: '',
        question: '',
      });
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö:', error);
      // alert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ä–º—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.');
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <form ref={formRef} className={styles.form} onSubmit={handleSubmit}>
      <div className={styles.formGroup}>
        <label htmlFor="name" className={styles.label}>
          –ò–º—è <span className={styles.required}>*</span>
        </label>
        <input
          type="text"
          id="name"
          name="name"
          value={formData.name}
          onChange={handleChange}
          onFocus={handleFocus}
          onBlur={handleBlur}
          className={`${styles.input} ${errors.name ? styles.inputError : ''}`}
          placeholder="–í–∞—à–µ –∏–º—è"
          disabled={isSubmitting}
        />
        {errors.name && <div className={styles.errorMessage}>{errors.name}</div>}
      </div>

      <div className={styles.formGroup}>
        <label htmlFor="phone" className={styles.label}>
          –¢–µ–ª–µ—Ñ–æ–Ω <span className={styles.required}>*</span>
        </label>
        <PhoneInput
          country="RU"
          international
          withCountryCallingCode
          id="phone"
          name="phone"
          value={formData.phone}
          onChange={handlePhoneChange}
          onFocus={handleFocus}
          onBlur={handleBlur}
          className={`${styles.input} ${errors.phone ? styles.inputError : ''}`}
          placeholder="+7 (___) ___-__-__"
          disabled={isSubmitting}
        />
        {errors.phone && <div className={styles.errorMessage}>{errors.phone}</div>}
      </div>

      <div className={styles.formGroup}>
        <label htmlFor="telegram" className={styles.label}>
          Telegram (username) <span className={styles.required}>*</span>
        </label>
        <input
          type="text"
          id="telegram"
          name="telegram"
          value={formData.telegram}
          onChange={handleChange}
          onFocus={handleFocus}
          onBlur={handleBlur}
          className={`${styles.input} ${errors.telegram ? styles.inputError : ''}`}
          placeholder="@username"
          disabled={isSubmitting}
        />
        {errors.telegram && <div className={styles.errorMessage}>{errors.telegram}</div>}
      </div>

      <div className={styles.formGroup}>
        <label htmlFor="question" className={styles.label}>
          –í–∞—à –≤–æ–ø—Ä–æ—Å <span className={styles.required}>*</span>
        </label>
        <textarea
          id="question"
          name="question"
          value={formData.question}
          onChange={handleChange}
          onFocus={handleFocus}
          onBlur={handleBlur}
          className={`${styles.textarea} ${errors.question ? styles.inputError : ''}`}
          placeholder="–û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ–¥—Ä–æ–±–Ω–æ"
          rows={4}
          disabled={isSubmitting}
        />
        {errors.question && <div className={styles.errorMessage}>{errors.question}</div>}
      </div>

      <div className={styles.formActions}>
        {onCancel && (
          <button 
            type="button" 
            className={styles.cancelButton} 
            onClick={onCancel}
            disabled={isSubmitting}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
        )}
        <button 
          ref={submitButtonRef}
          type="submit" 
          className={styles.submitButton}
          disabled={isSubmitting}
        >
          {isSubmitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞...' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å'}
        </button>
      </div>
    </form>
  );
};

export default FeedbackForm; 