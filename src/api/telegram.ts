import api from './apiService';

// –ú–∞—Å—Å–∏–≤ ID —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
export const ADMIN_CHAT_IDS = ['522814078', '67030677']; // IDs —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
export const ADMIN_CHAT_ID = ADMIN_CHAT_IDS[0]; // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º –∏–∑ –º–∞—Å—Å–∏–≤–∞ ADMIN_CHAT_IDS
 * @param message –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
 * @returns Promise<void>
 */
export const sendTelegramMessageToAllAdmins = async (message: string) => {
  console.log('üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:', {
    adminChats: ADMIN_CHAT_IDS,
    messagePreview: message.substring(0, 100) + '...'
  });

  const results = [];
  let successCount = 0;
  let errorCount = 0;

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ–±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å –∫–∞–∂–¥—É—é –æ—à–∏–±–∫—É
  for (const chatId of ADMIN_CHAT_IDS) {
    try {
      console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${chatId}...`);
      const result = await sendTelegramMessage(chatId, message);
      results.push({ chatId, status: 'success', result });
      successCount++;
      console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${chatId}`);
    } catch (error: any) {
      results.push({ chatId, status: 'error', error: error.message });
      errorCount++;
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ${chatId}:`, {
        error: error.message,
        status: error.response?.status,
        data: error.response?.data
      });
    }
  }

  console.log('üìä –ò—Ç–æ–≥–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º:', {
    total: ADMIN_CHAT_IDS.length,
    success: successCount,
    errors: errorCount,
    results: results
  });

  // –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å, –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
  if (successCount === 0) {
    throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏ –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û—à–∏–±–∫–∏: ${results.map(r => `${r.chatId}: ${r.status === 'error' ? r.error : 'unknown'}`).join(', ')}`);
  }

  // –ï—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–æ—Å—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—á–∏—Ç–∞–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é —É—Å–ø–µ—à–Ω–æ–π
  if (errorCount > 0) {
    console.warn(`‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞: ${successCount}/${ADMIN_CHAT_IDS.length} –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ`);
  }
};

export const sendTelegramMessage = async (chatId: string, message: string) => {
  console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram:', {
    chatId: chatId,
    messageLength: message.length,
    endpoint: `/chats/send-message/${chatId}`
  });

  try {
    const response = await api.post(`/chats/send-message/${chatId}`, {
      message: message
    });

    console.log('‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è —á–∞—Ç–∞', chatId, ':', response.data);

    if (!response.data) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
    }

    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç', chatId, ':', {
      error: error.message,
      status: error.response?.status,
      data: error.response?.data
    });
    throw error;
  }
};

export const sendTelegramMessageByUsername = async (message: string, username: string) => {
  if (!username) throw new Error('Username is required');
  const cleanUsername = username.startsWith('@') ? username.slice(1) : username;
  
  try {
    const response = await api.post(`/chats/send-message/${encodeURIComponent(cleanUsername)}`, { 
      message 
    });
    
    if (!response.data) {
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ username');
    }
    
    return response.data;
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ username:', error);
    throw error;
  }
};

export const formatUserMessage = (bookingData: any, service: any, serviceRu: string) => {
  const formatDate = (iso: string) => {
    const date = new Date(iso);
    return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
  };
  const formatTime = (iso: string) => {
    const timePart = iso.split('T')[1];
    if (!timePart) return '00:00';
    
    const [hoursMinutes] = timePart.split(':');
    if (!hoursMinutes) return '00:00';
    
    const hours = hoursMinutes.padStart(2, '0');
    const minutes = (timePart.split(':')[1] || '00').padStart(2, '0');
    
    return `${hours}:${minutes}`;
  };
  
  const startDate = new Date(bookingData.start);
  const endDate = new Date(bookingData.end);
  const startDateStr = formatDate(bookingData.start);
  const endDateStr = formatDate(bookingData.end);
  const startTimeStr = formatTime(bookingData.start);
  const endTimeStr = formatTime(bookingData.end);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
  const isCrossingDays = startDate.toDateString() !== endDate.toDateString();
  
  let dateTimeStr;
  if (isCrossingDays) {
    // –ú–µ–∂—Å—É—Ç–æ—á–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    dateTimeStr = `üìÖ –î–∞—Ç–∞: ${startDateStr} ‚Äî ${endDateStr}\nüïí –í—Ä–µ–º—è: ${startTimeStr} ‚Äî ${endTimeStr}`;
  } else {
    // –û–±—ã—á–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–Ω—è
    dateTimeStr = `üìÖ –î–∞—Ç–∞: ${startDateStr}\nüïí –í—Ä–µ–º—è: ${startTimeStr} ‚Äî ${endTimeStr}`;
  }
  
  let productsBlock = '';
  if (bookingData.products && Array.isArray(bookingData.products) && bookingData.products.length > 0) {
    const productsTotal = bookingData.products.reduce((sum: number, p: any) => sum + p.price * p.quantity, 0);
    productsBlock = '\nüõí –¢–æ–≤–∞—Ä—ã:' + bookingData.products.map((p: any) => `\n- ${p.name} x${p.quantity} = ${p.price * p.quantity}‚ÇΩ`).join('') +
      `\n–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${productsTotal}‚ÇΩ` +
      (bookingData.totalPrice ? `\n\nüíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${bookingData.totalPrice}‚ÇΩ` : '');
  }
  const serviceText = serviceRu || service?.serviceName || '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã';
  return `\n–í–∞—à–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n\n${dateTimeStr}\n\nüìã –£—Å–ª—É–≥–∞: ${serviceText}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price}‚ÇΩ${productsBlock}`;
};

export const formatAdminMessage = (bookingData: any, service: any, serviceRu: string) => {
  const formatDate = (iso: string) => {
    const date = new Date(iso);
    return date.toLocaleDateString('ru-RU', { day: '2-digit', month: '2-digit', year: 'numeric' });
  };
  const formatTime = (iso: string) => {
    const timePart = iso.split('T')[1];
    if (!timePart) return '00:00';
    
    const [hoursMinutes] = timePart.split(':');
    if (!hoursMinutes) return '00:00';
    
    const hours = hoursMinutes.padStart(2, '0');
    const minutes = (timePart.split(':')[1] || '00').padStart(2, '0');
    
    return `${hours}:${minutes}`;
  };
  
  const startDate = new Date(bookingData.start);
  const endDate = new Date(bookingData.end);
  const startDateStr = formatDate(bookingData.start);
  const endDateStr = formatDate(bookingData.end);
  const startTimeStr = formatTime(bookingData.start);
  const endTimeStr = formatTime(bookingData.end);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ª–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–µ–Ω—å
  const isCrossingDays = startDate.toDateString() !== endDate.toDateString();
  
  let dateTimeStr;
  if (isCrossingDays) {
    // –ú–µ–∂—Å—É—Ç–æ—á–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
    dateTimeStr = `üìÖ –î–∞—Ç–∞: ${startDateStr} ‚Äî ${endDateStr}\nüïí –í—Ä–µ–º—è: ${startTimeStr} ‚Äî ${endTimeStr}`;
  } else {
    // –û–±—ã—á–Ω–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –¥–Ω—è
    dateTimeStr = `üìÖ –î–∞—Ç–∞: ${startDateStr}\nüïí –í—Ä–µ–º—è: ${startTimeStr} ‚Äî ${endTimeStr}`;
  }
  
  let productsBlock = '';
  if (bookingData.products && Array.isArray(bookingData.products) && bookingData.products.length > 0) {
    const productsTotal = bookingData.products.reduce((sum: number, p: any) => sum + p.price * p.quantity, 0);
    productsBlock = '\nüõí –¢–æ–≤–∞—Ä—ã:' + bookingData.products.map((p: any) => `\n- ${p.name} x${p.quantity} = ${p.price * p.quantity}‚ÇΩ`).join('') +
      `\n–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–æ–≤: ${productsTotal}‚ÇΩ` +
      (bookingData.totalPrice ? `\n\nüíµ –ò—Ç–æ–≥–æ–≤–∞—è —Å—É–º–º–∞: ${bookingData.totalPrice}‚ÇΩ` : '');
  }
  const serviceText = serviceRu || service?.serviceName || '–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã';
  return `\n–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n\nüë§ –ö–ª–∏–µ–Ω—Ç: ${bookingData.clientName}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${bookingData.clientPhone}\nüìß Email: ${bookingData.clientEmail}\nüì± Telegram: ${bookingData.telegramUserName}\n\n${dateTimeStr}\n\nüìã –£—Å–ª—É–≥–∞: ${serviceText}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${service.price}‚ÇΩ${productsBlock}`;
};

/**
 * –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
 * –ú–æ–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –∏–∑ –∫–æ–Ω—Å–æ–ª–∏ –±—Ä–∞—É–∑–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
 */
export const testAdminNotifications = async () => {
  const testMessage = `üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n–í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU')}\n–≠—Ç–æ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.`;
  
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤...');
  
  try {
    await sendTelegramMessageToAllAdmins(testMessage);
    console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ');
    return { success: true, message: '–¢–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã' };
  } catch (error: any) {
    console.error('‚ùå –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–æ–π:', error);
    return { success: false, error: error.message };
  }
};

// –î–µ–ª–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–æ—Å—Ç—É–ø–Ω–æ–π –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
if (typeof window !== 'undefined') {
  (window as any).testAdminNotifications = testAdminNotifications;
} 